{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Importing relevant libraries\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import datetime\n",
    "from datetime import datetime,timedelta, date, time\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from statistics import mode\n",
    "from itertools import chain"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Webhook Send"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "def webhook_send(data_to_send):\n",
    "    \n",
    "    import json \n",
    "    import requests \n",
    "    \n",
    "    answer = str(input('Send Data? (Yes/No): '))\n",
    "    \n",
    "    if answer == 'Yes':\n",
    "        destination_url = str(input('Enter URL to send data to: '))\n",
    "    \n",
    "        data = data_to_send.to_json(orient='split')\n",
    "        r = requests.post(destination_url,data=json.dumps(data), \n",
    "                  headers = {'Content-Type':'application/json'})\n",
    "    \n",
    "        print('Data Succesfully Sent to {}'.format(destination_url))\n",
    "    else:\n",
    "        pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "custom_syle = {'axes.grid': False,'xtick.bottom': True,\n",
    "               'ytick.left': True, 'patch.edgecolor': 'black',\n",
    "              'patch.force_edgecolor': False}\n",
    "\n",
    "sns.set_style('darkgrid', rc= custom_syle)\n",
    "plt.style.use('dark_background')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "sleep_csv = 'SLEEP.csv'\n",
    "ex_csv = 'HEARTRATE_AUTO.csv'\n",
    "age_csv = 'USER.csv'\n",
    "# num_of_days_to_show = 7"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "def choose_num_days_to_show(auto=bool):\n",
    "    \"\"\"\n",
    "    Select how many days to show for graphs and data throughout the report.\n",
    "    \n",
    "    Auto mode is for autoamted report generation\n",
    "    \n",
    "    \"\"\"\n",
    "    if auto == True:\n",
    "        \n",
    "        if len(sleep_data_adj_len) < 7:\n",
    "\n",
    "            num_days_shown = len(sleep_data_adj_len)\n",
    "\n",
    "        else:\n",
    "            num_days_shown = 7\n",
    "        \n",
    "        return num_days_shown\n",
    "    \n",
    "    else:\n",
    "        num_days_shown = int(input('Enter Number of Days to show: '))\n",
    "        return num_days_shown"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Importing Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "sleep_data_all = pd.read_csv(sleep_csv)\n",
    "\n",
    "#Change this so we can test for different number of days \n",
    "sleep_data_adj_len = sleep_data_all[:4].copy()\n",
    "\n",
    "#number of days to show\n",
    "num_days_shown = choose_num_days_to_show(auto=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "sleep_data_adj_len.rename(columns= {'start':'BT', 'stop' :'WT', 'date':'Date'}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>deepSleepTime</th>\n",
       "      <th>shallowSleepTime</th>\n",
       "      <th>wakeTime</th>\n",
       "      <th>BT</th>\n",
       "      <th>WT</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2021-11-14</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2021-11-12 21:00:00+0000</td>\n",
       "      <td>2021-11-12 21:00:00+0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2021-11-15</td>\n",
       "      <td>109</td>\n",
       "      <td>343</td>\n",
       "      <td>1</td>\n",
       "      <td>2021-11-14 20:24:00+0000</td>\n",
       "      <td>2021-11-15 03:57:00+0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2021-11-16</td>\n",
       "      <td>80</td>\n",
       "      <td>238</td>\n",
       "      <td>2</td>\n",
       "      <td>2021-11-15 18:54:00+0000</td>\n",
       "      <td>2021-11-16 01:54:00+0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2021-11-17</td>\n",
       "      <td>114</td>\n",
       "      <td>316</td>\n",
       "      <td>9</td>\n",
       "      <td>2021-11-16 19:12:00+0000</td>\n",
       "      <td>2021-11-17 03:28:00+0000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Date  deepSleepTime  shallowSleepTime  wakeTime  \\\n",
       "0  2021-11-14              0                 0         0   \n",
       "1  2021-11-15            109               343         1   \n",
       "2  2021-11-16             80               238         2   \n",
       "3  2021-11-17            114               316         9   \n",
       "\n",
       "                         BT                        WT  \n",
       "0  2021-11-12 21:00:00+0000  2021-11-12 21:00:00+0000  \n",
       "1  2021-11-14 20:24:00+0000  2021-11-15 03:57:00+0000  \n",
       "2  2021-11-15 18:54:00+0000  2021-11-16 01:54:00+0000  \n",
       "3  2021-11-16 19:12:00+0000  2021-11-17 03:28:00+0000  "
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sleep_data_adj_len"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Sleep Data Manipulation + Calculating Sleep Duration"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "def avg_time(datetimes):\n",
    "    total = sum(dt.hour * 3600 + dt.minute * 60 + dt.second for dt in datetimes)\n",
    "    avg = total / len(datetimes)\n",
    "    minutes, seconds = divmod(int(avg), 60)\n",
    "    hours, minutes = divmod(minutes, 60)\n",
    "    return datetime.combine(date(1900, 1, 1), time(hours, minutes, seconds))\n",
    "\n",
    "def find_empty_rows(df,reset_index=False):\n",
    "    rows_to_change = []\n",
    "    \n",
    "    if reset_index == True:\n",
    "        df.reset_index(inplace=True, drop=True)\n",
    "    \n",
    "    for i in range(len(df)):\n",
    "        if df['deepSleepTime'][i]==0 and df['shallowSleepTime'][i]== 0 and df['wakeTime'][i] == 0:\n",
    "            rows_to_change.append(i)\n",
    "    return rows_to_change\n",
    "\n",
    "def find_and_replace_empty_times(df, wake_times_dt_format, rows_to_change):\n",
    "\n",
    "    wake_times_dt_format = [i for j, i in enumerate(wake_times_dt_format) if j not in rows_to_change]\n",
    "    \n",
    "    for i in range(len(rows_to_change)):\n",
    "        new_dt = str(wake_times_dt_format[rows_to_change[i]-1].date() + timedelta(days=1)) + ' ' + str(avg_time(wake_times_dt_format).time()) \n",
    "        wake_times_dt_format.insert(rows_to_change[i],datetime.strptime(new_dt[0:16], '%Y-%m-%d %H:%M'))\n",
    "\n",
    "    return wake_times_dt_format\n",
    "\n",
    "def find_and_replace_sleep_scores(sleep_duration_data, rows_to_change):\n",
    "\n",
    "    sleep_duration_data = [i for j, i in enumerate(sleep_duration_data) if j not in rows_to_change]\n",
    "    \n",
    "    for i in range(len(rows_to_change)): \n",
    "        sleep_duration_data.insert(rows_to_change[i],np.mean(sleep_duration_data))\n",
    "\n",
    "    return sleep_duration_data\n",
    "\n",
    "def find_and_replace_sleep_debt(sleep_debt_data, rows_to_change):\n",
    "    \n",
    "    sleep_debt_data = [i for j, i in enumerate(sleep_debt_data) if j not in rows_to_change]\n",
    "    \n",
    "    for i in range(len(rows_to_change)): \n",
    "        sleep_debt_data.insert(rows_to_change[i],0)\n",
    "\n",
    "    return sleep_debt_data\n",
    "\n",
    "def find_and_replace_SC(bt_sleep_cons,wt_sleep_cons):\n",
    "    \n",
    "    rows_to_change = [] \n",
    "    \n",
    "    for i in range(len(bt_sleep_cons)):\n",
    "        if bt_sleep_cons[i]==1440 and wt_sleep_cons[i]== 1440:\n",
    "            rows_to_change.append(i)\n",
    "    rows_to_change\n",
    "    \n",
    "    if len(rows_to_change) == 0:\n",
    "        return bt_sleep_cons, wt_sleep_cons\n",
    "    \n",
    "    else:\n",
    "    \n",
    "        bt_sleep_cons_data = [i for j, i in enumerate(bt_sleep_cons) if j not in rows_to_change]\n",
    "        wt_sleep_cons_data = [i for j, i in enumerate(wt_sleep_cons) if j not in rows_to_change]\n",
    "        \n",
    "        new_bt = round(np.mean(bt_sleep_cons_data))\n",
    "        new_wt = round(np.mean(wt_sleep_cons_data))\n",
    "        \n",
    "        new_bt_sleep_cons_data = [new_bt if x==1440 else x for x in bt_sleep_cons]\n",
    "        new_wt_sleep_cons_data = [new_wt if x==1440 else x for x in wt_sleep_cons]\n",
    "\n",
    "        \n",
    "        return new_bt_sleep_cons_data, new_wt_sleep_cons_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "rows_to_change = find_empty_rows(sleep_data_adj_len)\n",
    "\n",
    "#For graphs later on\n",
    "labels_to_change = find_empty_rows(sleep_data_adj_len[-num_days_shown:], reset_index=True)\n",
    "\n",
    "#Converting Start and Stop times to datetime.datetime objects  \n",
    "## Use as Master List of Datetime.datetime for prediction later on, change col values for date to strings \n",
    "wt_dt_form = [datetime.strptime(sleep_data_adj_len['WT'][i][0:19], '%Y-%m-%d %H:%M:%S') for i in range(len(sleep_data_adj_len))]\n",
    "bt_dt_form = [datetime.strptime(sleep_data_adj_len['BT'][i][0:19], '%Y-%m-%d %H:%M:%S') for i in range(len(sleep_data_adj_len))]\n",
    "\n",
    "wt_dt_form = find_and_replace_empty_times(sleep_data_adj_len,wt_dt_form, rows_to_change=rows_to_change)\n",
    "bt_dt_form = find_and_replace_empty_times(sleep_data_adj_len,bt_dt_form, rows_to_change=rows_to_change)\n",
    "\n",
    "#Converting from datetime.datetime objects --> Datetime format for table \n",
    "\n",
    "## S1: Convert datetime.datetime objects to unix timestamps\n",
    "sleep_data_adj_len['BT'] = [bt_dt_form[i].timestamp() for i in range(len(sleep_data_adj_len))]\n",
    "sleep_data_adj_len['WT'] = [wt_dt_form[i].timestamp() for i in range(len(sleep_data_adj_len))]\n",
    "\n",
    "sleep_data_adj_len['Date'] = [datetime.strftime(i, '%d/%m/%Y') for i in wt_dt_form]\n",
    "\n",
    "### Calculate Sleep duration while WT,BT while WT/BT data is float type\n",
    "# print(sleep_data_adj_len['WT'][4:7].values)\n",
    "# # print(sleep_data_adj_len['BT'][4:7].values)\n",
    "\n",
    "sleep_dur_mins_temp = [int(i) for i in (sleep_data_adj_len['WT'].values - sleep_data_adj_len['BT'].values)/60]\n",
    "sleep_dur_hrs_temp = [round(i,2) for i in (sleep_data_adj_len['WT'].values - sleep_data_adj_len['BT'].values)/3600]\n",
    "\n",
    "sleep_data_adj_len['Sleep Duration Mins'] = [round(i) for i in find_and_replace_sleep_scores(sleep_dur_mins_temp, rows_to_change)]\n",
    "sleep_data_adj_len['Sleep Duration Hrs'] = [round(i,2) for i in find_and_replace_sleep_scores(sleep_dur_hrs_temp, rows_to_change)]\n",
    "sleep_debt_data = sleep_data_adj_len.apply(lambda row : round((row['Sleep Duration Hrs'] - 8),2),axis=1)\n",
    "sleep_data_adj_len['Daily Sleep Debt'] = find_and_replace_sleep_debt(sleep_debt_data, rows_to_change)\n",
    "\n",
    "#Converting from Unixtimestamps to appropriate Datetime format for table \n",
    "\n",
    "## S2: Converting Unixtimestamps to Timestrings\n",
    "sleep_data_adj_len['BT'] = [datetime.fromtimestamp(i).strftime('%H:%M') for i in sleep_data_adj_len['BT']]\n",
    "sleep_data_adj_len['WT'] = [datetime.fromtimestamp(i).strftime('%H:%M') for i in sleep_data_adj_len['WT']]\n",
    "\n",
    "## S3: Converting Timestrings to Datetime format \n",
    "sleep_data_adj_len['BT'] = [datetime.strptime(i,'%H:%M').time() for i in sleep_data_adj_len['BT']]\n",
    "sleep_data_adj_len['WT'] = [datetime.strptime(i,'%H:%M').time() for i in sleep_data_adj_len['WT']]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>deepSleepTime</th>\n",
       "      <th>shallowSleepTime</th>\n",
       "      <th>wakeTime</th>\n",
       "      <th>BT</th>\n",
       "      <th>WT</th>\n",
       "      <th>Sleep Duration Mins</th>\n",
       "      <th>Sleep Duration Hrs</th>\n",
       "      <th>Daily Sleep Debt</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>18/11/2021</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>19:30:00</td>\n",
       "      <td>03:06:00</td>\n",
       "      <td>456</td>\n",
       "      <td>7.61</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>15/11/2021</td>\n",
       "      <td>109</td>\n",
       "      <td>343</td>\n",
       "      <td>1</td>\n",
       "      <td>20:24:00</td>\n",
       "      <td>03:57:00</td>\n",
       "      <td>453</td>\n",
       "      <td>7.55</td>\n",
       "      <td>-0.45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>16/11/2021</td>\n",
       "      <td>80</td>\n",
       "      <td>238</td>\n",
       "      <td>2</td>\n",
       "      <td>18:54:00</td>\n",
       "      <td>01:54:00</td>\n",
       "      <td>420</td>\n",
       "      <td>7.00</td>\n",
       "      <td>-1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>17/11/2021</td>\n",
       "      <td>114</td>\n",
       "      <td>316</td>\n",
       "      <td>9</td>\n",
       "      <td>19:12:00</td>\n",
       "      <td>03:28:00</td>\n",
       "      <td>496</td>\n",
       "      <td>8.27</td>\n",
       "      <td>0.27</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Date  deepSleepTime  shallowSleepTime  wakeTime        BT        WT  \\\n",
       "0  18/11/2021              0                 0         0  19:30:00  03:06:00   \n",
       "1  15/11/2021            109               343         1  20:24:00  03:57:00   \n",
       "2  16/11/2021             80               238         2  18:54:00  01:54:00   \n",
       "3  17/11/2021            114               316         9  19:12:00  03:28:00   \n",
       "\n",
       "   Sleep Duration Mins  Sleep Duration Hrs  Daily Sleep Debt  \n",
       "0                  456                7.61              0.00  \n",
       "1                  453                7.55             -0.45  \n",
       "2                  420                7.00             -1.00  \n",
       "3                  496                8.27              0.27  "
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sleep_data_adj_len"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Calculating Sleep Consistency + SDD + Daily Sleep Score"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## <u>Formulas</u>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "def convert_time(time_lst:list):\n",
    "    \"\"\"\n",
    "    Converts datetimes to integers so they are appropriately spaced based on the the 24hr clock.\n",
    "    \n",
    "    Any time between 0 - 12 converted to 24 hour clock:\n",
    "    e.g. 7:27 --> (24 + 7x60) + 27 ---> 1887\n",
    "    \n",
    "    Any other time (13 --> 23):\n",
    "    e.g. 21:35 --> (23*60) + 35 ---> 1295 \n",
    "    \n",
    "    \n",
    "    \"\"\"\n",
    "    converted_times = [] \n",
    "     \n",
    "    for i in range(len(time_lst)):\n",
    "\n",
    "        if time_lst[i].hour == 0:\n",
    "            converted_time = 24*60 + time_lst[i].minute\n",
    "            converted_times.append(converted_time)\n",
    "            \n",
    "\n",
    "        elif 0 < time_lst[i].hour < 12:\n",
    "            converted_time = (24 + time_lst[i].hour)*60 + time_lst[i].minute\n",
    "            converted_times.append(converted_time)\n",
    "            \n",
    "\n",
    "        else:\n",
    "            converted_time = time_lst[i].hour*60 + time_lst[i].minute\n",
    "            converted_times.append(converted_time)\n",
    "\n",
    "    return converted_times\n",
    "\n",
    "def daily_sleep_consistency(bed_time_list:list,wake_time_list:list):\n",
    "    \"\"\"\n",
    "    Calculates the Sleep Consistency based on the average BT/WT variability from the mean.\n",
    "    \n",
    "    \"\"\"\n",
    "    import numpy as np \n",
    "    \n",
    "    penalisation_factor = 5 \n",
    "    bt_mean = np.mean(bed_time_list)\n",
    "    wt_mean = np.mean(wake_time_list)\n",
    "    \n",
    "    bt_sub_mean = [] \n",
    "    wt_sub_mean = []\n",
    "    \n",
    "    for i in range(len(bed_time_list)):\n",
    "        bt_sub_mean.append(abs(bed_time_list[i] - bt_mean))\n",
    "        wt_sub_mean.append(abs(wake_time_list[i] - wt_mean))\n",
    "    \n",
    "    avg_bt_variability = np.mean(bt_sub_mean)/bt_mean\n",
    "    avg_wt_variability = np.mean(wt_sub_mean)/wt_mean\n",
    "    \n",
    "    daily_sleep_consistency = 100 - (((avg_bt_variability+avg_wt_variability)*100)*penalisation_factor)\n",
    "    \n",
    "    if daily_sleep_consistency < -100:\n",
    "        daily_sleep_consistency = -100\n",
    "        return round(daily_sleep_consistency,1)\n",
    "    \n",
    "    else:\n",
    "        return round(daily_sleep_consistency,1)\n",
    "    \n",
    "def apply_sleep_consistency(wt_list:list, bt_list:list, print_text = True):\n",
    "    \"\"\"\n",
    "    Applies sleep consistency using BTs and WTs over the last 4 days. \n",
    "    \n",
    "    \"\"\"\n",
    "    daily_sleep_cons_lst_1 = []\n",
    "\n",
    "    #1440 represents a complete 0 which will usually only occur in when theres missing sleep\n",
    "    # Replace this with \n",
    "    \n",
    "    [None if x==1440 else x for x in bt_list]\n",
    "    [None if x==1440 else x for x in wt_list]\n",
    "\n",
    "\n",
    "    \n",
    "    for i in range(len(wt_list)):\n",
    "\n",
    "        if i == 0:\n",
    "\n",
    "#             w_times = [wt_list[i]]\n",
    "#             b_times = [bt_list[i]]\n",
    "            daily_sleep_cons_lst_1.insert(i,daily_sleep_consistency(bed_time_list=[bt_list[i]],wake_time_list=[wt_list[i]]))\n",
    "        \n",
    "            if print_text == True:\n",
    "                print('Day ' + str(i))\n",
    "                print('Wake Time Range = {}'.format(max([wt_list[i]])-min([wt_list[i]])))\n",
    "                print('Bed Time Range = {}'.format(max([bt_list[i]])-min([bt_list[i]])))\n",
    "                print('Wake Times', [wt_list[i]])\n",
    "                print('Bed Times', [bt_list[i]])\n",
    "                print(\"Daily Sleep Consistency = {}\".format(daily_sleep_consistency(bed_time_list=[bt_list[i]],wake_time_list=[wt_list[i]])))\n",
    "                print('\\n')\n",
    "\n",
    "        elif i == 1:\n",
    "\n",
    "#             w_times_1 = [wt_list[i],wt_list[i-1]]\n",
    "#             b_times_1 = [bt_list[i],bt_list[i-1]]\n",
    "            \n",
    "            daily_sleep_cons_lst_1.insert(i,daily_sleep_consistency(bed_time_list=[bt_list[i],bt_list[i-1]],wake_time_list=[wt_list[i],wt_list[i-1]]))\n",
    "        \n",
    "            if print_text == True:\n",
    "                print('Day ' + str(i))\n",
    "                print('Wake Times', [wt_list[i],wt_list[i-1]])\n",
    "                print('Bed Times', [bt_list[i],bt_list[i-1]])\n",
    "                print('Wake Time Range = {}'.format(max([wt_list[i],wt_list[i-1]])-min([wt_list[i],wt_list[i-1]])))\n",
    "                print('Bed Time Range = {}'.format(max([bt_list[i],bt_list[i-1]])-min([bt_list[i],bt_list[i-1]])))\n",
    "                print(\"Daily Sleep Consistency = {}\".format(daily_sleep_consistency(bed_time_list=[bt_list[i],bt_list[i-1]],wake_time_list=[wt_list[i],wt_list[i-1]])))\n",
    "                print('\\n')\n",
    "\n",
    "        elif i == 2 :\n",
    "#             w_times = [wt_list[i],wt_list[i-1], wt_list[i-2]]\n",
    "#             b_times = [bt_list[i],bt_list[i-1], bt_list[i-2]]\n",
    "            daily_sleep_cons_lst_1.insert(i,daily_sleep_consistency(bed_time_list=[bt_list[i],bt_list[i-1], bt_list[i-2]],wake_time_list=[wt_list[i],wt_list[i-1], wt_list[i-2]]))\n",
    "        \n",
    "            if print_text == True:    \n",
    "                print('Day ' + str(i))\n",
    "                print('Wake Times', [wt_list[i],wt_list[i-1], wt_list[i-2]])\n",
    "                print('Bed Times', [bt_list[i],bt_list[i-1], bt_list[i-2]])\n",
    "                print('Wake Time Range = {}'.format(max([wt_list[i],wt_list[i-1], wt_list[i-2]])-min([wt_list[i],wt_list[i-1], wt_list[i-2]])))\n",
    "                print('Bed Time Range = {}'.format(max([bt_list[i],bt_list[i-1], bt_list[i-2]])-min([bt_list[i],bt_list[i-1], bt_list[i-2]])))\n",
    "                print(\"Daily Sleep Consistency = {}\".format(daily_sleep_consistency(bed_time_list=[bt_list[i],bt_list[i-1], bt_list[i-2]],wake_time_list=[wt_list[i],wt_list[i-1], wt_list[i-2]])))\n",
    "                print('\\n')\n",
    "\n",
    "        else:\n",
    "        \n",
    "#             w_times = [wt_list[i],wt_list[i-1], wt_list[i-2], wt_list[i-3]] \n",
    "#             b_times = [bt_list[i],bt_list[i-1], bt_list[i-2], bt_list[i-3]] \n",
    "            daily_sleep_cons_lst_1.insert(i,daily_sleep_consistency(bed_time_list=[bt_list[i],bt_list[i-1], bt_list[i-2], bt_list[i-3]] ,wake_time_list=[wt_list[i],wt_list[i-1], wt_list[i-2], wt_list[i-3]]))\n",
    "        \n",
    "            if print_text == True:\n",
    "                print('Day ' + str(i))\n",
    "                print('Wake Times', [wt_list[i],wt_list[i-1], wt_list[i-2], wt_list[i-3]])\n",
    "                print('Bed Times', [bt_list[i],bt_list[i-1], bt_list[i-2], bt_list[i-3]] )\n",
    "                print('Wake Time Range = {}'.format(max([wt_list[i],wt_list[i-1], wt_list[i-2], wt_list[i-3]])-min([wt_list[i],wt_list[i-1], wt_list[i-2], wt_list[i-3]])))\n",
    "                print('Bed Time Range = {}'.format(max([bt_list[i],bt_list[i-1], bt_list[i-2], bt_list[i-3]] )-min([bt_list[i],bt_list[i-1], bt_list[i-2], bt_list[i-3]] )))\n",
    "                print(\"Daily Sleep Consistency = {}\".format(daily_sleep_consistency(bed_time_list=[bt_list[i],bt_list[i-1], bt_list[i-2], bt_list[i-3]] ,wake_time_list=[wt_list[i],wt_list[i-1], wt_list[i-2], wt_list[i-3]])))\n",
    "                print('\\n')\n",
    "        \n",
    "    return daily_sleep_cons_lst_1 \n",
    "\n",
    "def daily_SDD(sleep_duration:int,recommended_sleep:int,previous_3_days_sleep:list):\n",
    "    \"\"\"\n",
    "    Calculates the Daily SDD using recommended sleep duration, requires last 3 days of sleep to calculate.\n",
    "    \n",
    "    \"\"\"\n",
    "    w1 = 0.13833333 \n",
    "    \n",
    "    sleep_duration_mins = sleep_duration*60\n",
    "    recommended_sleep_duration = recommended_sleep*60\n",
    "    \n",
    "    recommended_sleep_4_days= recommended_sleep*(len(previous_3_days_sleep))\n",
    "    \n",
    "    total_previous_3_days_sleep_hours = sum(previous_3_days_sleep)\n",
    "    \n",
    "    sleep_debt_penalisation = (total_previous_3_days_sleep_hours-recommended_sleep_4_days)*2\n",
    "    \n",
    "    if 0 <=sleep_duration_mins<=480:\n",
    "            \n",
    "            if len(previous_3_days_sleep) == 0:\n",
    "                \n",
    "                sleep_duration_score = ((sleep_duration_mins/recommended_sleep_duration)*100)\n",
    "                return round(sleep_duration_score,1)\n",
    "            \n",
    "            else:\n",
    "                \n",
    "                if sleep_debt_penalisation > 0: \n",
    "                    sleep_duration_score = ((sleep_duration_mins/recommended_sleep_duration)*100)\n",
    "                    return round(sleep_duration_score,1)\n",
    "                \n",
    "                else:\n",
    "                    sleep_duration_score = ((sleep_duration_mins/recommended_sleep_duration)*100) + sleep_debt_penalisation\n",
    "                    return round(sleep_duration_score,1)\n",
    "\n",
    "    elif 480 < sleep_duration_mins <= 540:\n",
    "        \n",
    "        if len(previous_3_days_sleep) == 0:\n",
    "                \n",
    "                sleep_duration_score = 200 - ((sleep_duration_mins/recommended_sleep_duration)*100)\n",
    "                return round(sleep_duration_score,1)\n",
    "            \n",
    "        else:\n",
    "        \n",
    "            if sleep_debt_penalisation > 0:\n",
    "                sleep_duration_score = 200 - ((sleep_duration_mins/recommended_sleep_duration)*100)\n",
    "                return round(sleep_duration_score, 1)\n",
    "\n",
    "            else:\n",
    "                sleep_duration_score = 200 - ((sleep_duration_mins/recommended_sleep_duration)*100) + sleep_debt_penalisation\n",
    "                return round(sleep_duration_score, 1)\n",
    "\n",
    "    elif 540 < sleep_duration_mins <= 1160:\n",
    "        \n",
    "        if len(previous_3_days_sleep) == 0:\n",
    "                s_debt_penalty = ((sleep_duration_mins/60) - recommended_sleep)*2\n",
    "                sleep_duration_score = (75 - ((sleep_duration_mins-600)*w1)) + s_debt_penalty\n",
    "                return round(sleep_duration_score,1)\n",
    "            \n",
    "        else:\n",
    "        \n",
    "            if sleep_debt_penalisation > 0:\n",
    "                sleep_duration_score = ((75 - (sleep_duration_mins-600)*w1)) + sleep_debt_penalisation\n",
    "                return round(sleep_duration_score, 1)\n",
    "            \n",
    "            else:\n",
    "                sleep_duration_score = ((75 - (sleep_duration_mins-600)*w1)) + sleep_debt_penalisation\n",
    "                return round(sleep_duration_score, 1)\n",
    "        \n",
    "    else:\n",
    "        return round(0,1)\n",
    "    \n",
    "\n",
    "def apply_SDD(rec_sleep_dur:int, sleep_duration_list:list, print_text=True):\n",
    "    \"\"\"\n",
    "    Applies the Daily SDD using sleep duration ussing previous 3 days sleep for each day.\n",
    "    \n",
    "    \"\"\"\n",
    "\n",
    "    daily_SDD_scores = [] \n",
    "    \n",
    "    for i in range(len(sleep_duration_list)):\n",
    "    \n",
    "        if i == 0:\n",
    "\n",
    "            sleep_duration = sleep_duration_list[i] \n",
    "            sleep_duration_times = []\n",
    "            daily_SDD_scores.append(daily_SDD(sleep_duration=sleep_duration, recommended_sleep=rec_sleep_dur,previous_3_days_sleep=sleep_duration_times))\n",
    "            \n",
    "            if print_text == True:\n",
    "                print('Day ' + str(i+1))\n",
    "                print('Sleep Duration Times', sleep_duration_times)\n",
    "                print('Day ' + str(i+1), 'Sleep Duration = {}'.format(sleep_duration) )\n",
    "                print('Daily SDD = {}'.format(daily_SDD(sleep_duration=sleep_duration, recommended_sleep=rec_sleep_dur,previous_3_days_sleep=sleep_duration_times)))\n",
    "                print('\\n')\n",
    "            \n",
    "\n",
    "        elif i == 1:\n",
    "            \n",
    "            sleep_duration_times = [sleep_duration_list[i-1]]\n",
    "            sleep_duration = sleep_duration_list[i]\n",
    "            daily_SDD_scores.append(daily_SDD(sleep_duration=sleep_duration, recommended_sleep=rec_sleep_dur,previous_3_days_sleep=sleep_duration_times))\n",
    "            \n",
    "            if print_text == True:\n",
    "                print('Day ' + str(i+1))\n",
    "                print('Sleep Duration Times', sleep_duration_times)\n",
    "                print('Day ' + str(i+1), 'Sleep Duration = {}'.format(sleep_duration) )\n",
    "                print('Daily SDD = {}'.format(daily_SDD(sleep_duration=sleep_duration, recommended_sleep=rec_sleep_dur,previous_3_days_sleep=sleep_duration_times)))\n",
    "                print('\\n')\n",
    "            \n",
    "\n",
    "        elif i == 2 :\n",
    "\n",
    "            sleep_duration_times =[sleep_duration_list[i-1], sleep_duration_list[i-2]]\n",
    "            sleep_duration = sleep_duration_list[i] \n",
    "            daily_SDD_scores.append(daily_SDD(sleep_duration=sleep_duration, recommended_sleep=rec_sleep_dur,previous_3_days_sleep=sleep_duration_times))\n",
    "            \n",
    "            if print_text == True:\n",
    "                print('Day ' + str(i+1))\n",
    "                print('Sleep Duration Times', sleep_duration_times)\n",
    "                print('Day ' + str(i+1), 'Sleep Duration = {}'.format(sleep_duration) )\n",
    "                print('Daily SDD = {}'.format(daily_SDD(sleep_duration=sleep_duration, recommended_sleep=rec_sleep_dur,previous_3_days_sleep=sleep_duration_times)))\n",
    "                print('\\n')\n",
    "\n",
    "        else:\n",
    "\n",
    "            sleep_duration_times =[sleep_duration_list[i-1], sleep_duration_list[i-2], sleep_duration_list[i-3]]\n",
    "            sleep_duration = sleep_duration_list[i]\n",
    "            daily_SDD_scores.append(daily_SDD(sleep_duration=sleep_duration, recommended_sleep=rec_sleep_dur,previous_3_days_sleep=sleep_duration_times))\n",
    "            \n",
    "            if print_text == True:\n",
    "                print('Day ' + str(i+1))\n",
    "                print('Sleep Duration Times', sleep_duration_times)\n",
    "                print('Day ' + str(i+1), 'Sleep Duration = {}'.format(sleep_duration) )\n",
    "                print('Daily SDD = {}'.format(daily_SDD(sleep_duration=sleep_duration, recommended_sleep=rec_sleep_dur,previous_3_days_sleep=sleep_duration_times)))\n",
    "                print('\\n')\n",
    "            \n",
    "    return daily_SDD_scores"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Date', 'deepSleepTime', 'shallowSleepTime', 'wakeTime', 'BT', 'WT',\n",
       "       'Sleep Duration Mins', 'Sleep Duration Hrs', 'Daily Sleep Debt'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sleep_data_adj_len.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Converting Times to format for Sleep Consistency, Applying SC formula, Inserting results\n",
    "\n",
    "##S1: Convert BT + WT to apporpiate nubmers\n",
    "bt_sleep_cons = convert_time(sleep_data_adj_len['BT'].values)\n",
    "wt_sleep_cons = convert_time(sleep_data_adj_len['WT'].values)\n",
    "\n",
    "##S2: Replace any missing data with mean of converted sleep conssistency values for BT and WT data \n",
    "bt_consitency_data, wt_consistency_data = find_and_replace_SC(bt_sleep_cons=bt_sleep_cons, \n",
    "                                                              wt_sleep_cons=wt_sleep_cons)\n",
    "##S3:Apply SC formula to data \n",
    "daily_SC_list = apply_sleep_consistency(wt_list=wt_consistency_data, \n",
    "                                        bt_list= bt_consitency_data, print_text=False)\n",
    "##S3:Insert resultss to Dataframe \n",
    "sleep_data_adj_len.insert(len(sleep_data_adj_len.columns), 'Daily Sleep Consistency',daily_SC_list)\n",
    "\n",
    "#Applying SDD formula, Inserting results\n",
    "sleep_dur_hrs = sleep_data_adj_len['Sleep Duration Hrs'].values.flatten()\n",
    "daily_SDD_list = apply_SDD(rec_sleep_dur=8,sleep_duration_list=sleep_dur_hrs, print_text=False)\n",
    "sleep_data_adj_len.insert(len(sleep_data_adj_len.columns), 'Daily SDD',daily_SDD_list)\n",
    "\n",
    "#Calculating Overall Sleep Score, Applying sleep score formula across every row in the Table\n",
    "sleep_data_adj_len['Daily Sleep Score'] = sleep_data_adj_len.apply(\n",
    "    lambda row : (row['Daily Sleep Consistency']*0.3) + (row['Daily SDD']*0.7), axis=1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "sleep_data_adj_len.drop(columns = ['deepSleepTime', 'shallowSleepTime', 'wakeTime'], inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Final Sleep Data Table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>BT</th>\n",
       "      <th>WT</th>\n",
       "      <th>Sleep Duration Mins</th>\n",
       "      <th>Sleep Duration Hrs</th>\n",
       "      <th>Daily Sleep Debt</th>\n",
       "      <th>Daily Sleep Consistency</th>\n",
       "      <th>Daily SDD</th>\n",
       "      <th>Daily Sleep Score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>18/11/2021</td>\n",
       "      <td>19:30:00</td>\n",
       "      <td>03:06:00</td>\n",
       "      <td>456</td>\n",
       "      <td>7.61</td>\n",
       "      <td>0.00</td>\n",
       "      <td>100.0</td>\n",
       "      <td>95.1</td>\n",
       "      <td>96.57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>15/11/2021</td>\n",
       "      <td>20:24:00</td>\n",
       "      <td>03:57:00</td>\n",
       "      <td>453</td>\n",
       "      <td>7.55</td>\n",
       "      <td>-0.45</td>\n",
       "      <td>81.0</td>\n",
       "      <td>93.6</td>\n",
       "      <td>89.82</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>16/11/2021</td>\n",
       "      <td>18:54:00</td>\n",
       "      <td>01:54:00</td>\n",
       "      <td>420</td>\n",
       "      <td>7.00</td>\n",
       "      <td>-1.00</td>\n",
       "      <td>73.0</td>\n",
       "      <td>85.8</td>\n",
       "      <td>81.96</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>17/11/2021</td>\n",
       "      <td>19:12:00</td>\n",
       "      <td>03:28:00</td>\n",
       "      <td>496</td>\n",
       "      <td>8.27</td>\n",
       "      <td>0.27</td>\n",
       "      <td>77.3</td>\n",
       "      <td>92.9</td>\n",
       "      <td>88.22</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Date        BT        WT  Sleep Duration Mins  Sleep Duration Hrs  \\\n",
       "0  18/11/2021  19:30:00  03:06:00                  456                7.61   \n",
       "1  15/11/2021  20:24:00  03:57:00                  453                7.55   \n",
       "2  16/11/2021  18:54:00  01:54:00                  420                7.00   \n",
       "3  17/11/2021  19:12:00  03:28:00                  496                8.27   \n",
       "\n",
       "   Daily Sleep Debt  Daily Sleep Consistency  Daily SDD  Daily Sleep Score  \n",
       "0              0.00                    100.0       95.1              96.57  \n",
       "1             -0.45                     81.0       93.6              89.82  \n",
       "2             -1.00                     73.0       85.8              81.96  \n",
       "3              0.27                     77.3       92.9              88.22  "
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sleep_data_adj_len"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Prepping Data for Graphs "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "def bt_conversion_graph(bed_times):\n",
    "    \"\"\"\n",
    "    Converts bed times into number that reprsents that times adjusted position on the graph.\n",
    "    datetime.time --> int \n",
    "    \n",
    "    \n",
    "    e.g. 22:24PM ---> -1.76\n",
    "    \n",
    "    \"\"\"\n",
    "    \n",
    "    time_lst = []\n",
    "    \n",
    "    for i in range(len(bed_times)):\n",
    "        if int(bed_times[i].strftime('%H%M'))/100 >=12:\n",
    "            time_lst.append((int(bed_times[i].strftime('%H%M'))/100)-24)\n",
    "        else:\n",
    "            time_lst.append((int(bed_times[i].strftime('%H%M'))/100))\n",
    "    \n",
    "    return time_lst"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "#MASTER VARIABLE TO CHANGE WHICH DECIDES HOW MANY OF THE PAST DAYS TO SHOW IN SLEEP CONSISTENCY GRAPH \n",
    "\n",
    "final_w_times = [(int(i.strftime('%H%M'))/100) for i in sleep_data_adj_len['WT'][-num_days_shown:].values]\n",
    "final_b_times = bt_conversion_graph(sleep_data_adj_len['BT'][-num_days_shown:].values)\n",
    "sleep_dur_times = [str(round(i,1)) + ' Hours' for i in sleep_data_adj_len['Sleep Duration Hrs'].values]\n",
    " \n",
    "bed_time_labels = [str(i)[0:5] for i in sleep_data_adj_len['BT'][-num_days_shown:].values]\n",
    "wake_time_labels = [str(i)[0:5] for i in sleep_data_adj_len['WT'][-num_days_shown:].values]\n",
    "\n",
    "#Creating axis labels and annotation labels\n",
    "sleep_dur_labels = [str(i).split('.')[0] + ' Hours' + '\\n' + str(int(int(str(round(i,1)).split('.')[1])/10*60)) + ' Mins' for i in sleep_data_adj_len['Sleep Duration Hrs'].values[-num_days_shown:]]\n",
    "last7daylbls = [i.strftime('%A') for i in wt_dt_form[-num_days_shown:]]\n",
    "date_labels = [i.strftime('%d/%m') for i in wt_dt_form[-num_days_shown:]]\n",
    "final_date_labels = [last7daylbls[i] + '\\n(' + date_labels[i] + ')' for i in range(len(last7daylbls))]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "final_w_times = [i for j, i in enumerate(final_w_times) if j not in labels_to_change]\n",
    "final_b_times = [i for j, i in enumerate(final_b_times) if j not in labels_to_change] \n",
    "sleep_dur_labels = [i for j, i in enumerate(sleep_dur_labels) if j not in labels_to_change]\n",
    "bed_time_labels = [i for j, i in enumerate(bed_time_labels) if j not in labels_to_change] \n",
    "wake_time_labels = [i for j, i in enumerate(wake_time_labels) if j not in labels_to_change] \n",
    "\n",
    "for i in range(len(labels_to_change)): \n",
    "    final_b_times.insert(labels_to_change[i],0)\n",
    "    final_w_times.insert(labels_to_change[i],0)\n",
    "    bed_time_labels.insert(labels_to_change[i],'')\n",
    "    wake_time_labels.insert(labels_to_change[i],'')\n",
    "    sleep_dur_labels.insert(labels_to_change[i],'No\\nSleep\\nDetected')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Plotting Sleep Consistency "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_sleep_cons(w_times, b_times, bt_labels, wt_labels, sd_labels, fd_labels):\n",
    "    bt_labels_h = [0,0.7,0.7,0.8,0.75,0.75,0.75,0.75]\n",
    "    wt_labels_h = [0,0.4,0.4,0.4,0.4,0.4,0.4,0.4] \n",
    "    sd_labels_h = [0,3.3,4,3.3,3.4,3.5,3.5,3.5]\n",
    "\n",
    "    bar_width_adj = [0,0.1,0.4,0.27,0.45,0.55,0.63,0.75]\n",
    "    bt_labels_adj = [0,0.03,0.14,.08,0.13,0.17,0.17,0.21]\n",
    "    wt_labels_adj = [0,0.03,0.14,0.08,0.13,0.17,0.17,0.21] \n",
    "    sd_labels_adj = [0,0.04,0.19,0.11,0.16,0.22,0.26,0.32]\n",
    "    \n",
    "    y_labels = ['16:00','18:00','20:00','22:00','00:00','02:00', '04:00', '06:00', '08:00', '10:00','12:00','14:00','16:00']\n",
    "    ytickss= [-8,-6,-4,-2,0,2,4,6,8,10,12,14,16]\n",
    "\n",
    "    fig = plt.figure(figsize=(10,7.5))\n",
    "    ax = plt.subplot(111)\n",
    "\n",
    "    ax.spines['top'].set_visible(False)\n",
    "    ax.spines['right'].set_visible(False)\n",
    "\n",
    "    plt.ylim(-6,16)\n",
    "    plt.xticks(rotation=0, fontsize=14)\n",
    "    plt.yticks(ticks = ytickss,labels=y_labels,fontsize=14)\n",
    "#     plt.title('Sleep Consistency from {} to {}'.format(date_labels[0],date_labels[-1]), pad=30,fontsize=18)\n",
    "    # plt.xlabel('Date', labelpad=20, fontsize=15, loc='center')\n",
    "    # plt.ylabel('Time', labelpad=40, fontsize=15, loc='center', rotation=0)\n",
    "        \n",
    "    if len(w_times) == 1:\n",
    "        ax.bar(0,0)\n",
    "    \n",
    "    if len(w_times) == 2: \n",
    "        ax.bar(0,0)\n",
    "        plt.gcf().subplots_adjust(left=0.01, right=0.35)\n",
    "\n",
    "    upper = w_times\n",
    "    lower = b_times\n",
    "    height = [upper[i] - lower[i] for i in range(len(upper))]\n",
    "\n",
    "    ax.bar(fd_labels, height, bottom=lower,color='mediumslateblue', width=bar_width_adj[num_days_shown],align='center')\n",
    "\n",
    "    # print(num_of_days_to_show)\n",
    "    for i in range(num_days_shown):\n",
    "        ax.annotate(bt_labels[i],xy=(i-bt_labels_adj[num_days_shown],lower[i] - bt_labels_h[num_days_shown]),fontsize=14)\n",
    "        ax.annotate(wt_labels[i], xy= (i-wt_labels_adj[num_days_shown], upper[i] + wt_labels_h[num_days_shown]),fontsize=14)\n",
    "        ax.annotate(sd_labels[-(num_days_shown - i)], xy = (i-sd_labels_adj[num_days_shown], (upper[i]- height[i])+ sd_labels_h[num_days_shown]), fontsize=14)\n",
    "        \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x540 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_sleep_cons(w_times=final_w_times, b_times=final_b_times, \n",
    "                wt_labels=wake_time_labels, bt_labels=bed_time_labels, \n",
    "                sd_labels=sleep_dur_labels, fd_labels=final_date_labels)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# <u>Calculating Weekly Consistency + SDD <u>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "def weekly_sleep_consistency(bed_time_list:list,wake_time_list:list):\n",
    "    import numpy as np \n",
    "    \n",
    "    bt_mean = np.mean(bed_time_list)\n",
    "    wt_mean = np.mean(wake_time_list)\n",
    "    \n",
    "    bt_sub_mean = [] \n",
    "    wt_sub_mean = []\n",
    "    \n",
    "    assert len(bed_time_list) == len(wake_time_list), f\" length of bed time list {len(bed_time_list)} not the same as wake time list {len(wake_time_list)}\"\n",
    "    \n",
    "    for i in range(len(bed_time_list)):\n",
    "        bt_sub_mean.append(abs(bed_time_list[i] - bt_mean))\n",
    "        wt_sub_mean.append(abs(wake_time_list[i] - wt_mean))\n",
    "    \n",
    "    avg_bt_variability = np.mean(bt_sub_mean)/bt_mean\n",
    "    avg_wt_variability = np.mean(wt_sub_mean)/wt_mean\n",
    "    \n",
    "    weekly_sleep_consistency = 100 - ((avg_bt_variability+avg_wt_variability)*100)*5\n",
    "    \n",
    "    return round(weekly_sleep_consistency,1)\n",
    "\n",
    "def weekly_SDD(recommended_sleep_duration:int,weeks_sleep:list):\n",
    "    \n",
    "    total_weeks_sleep_hours = sum(weeks_sleep)\n",
    "    total_weeks_sleep_mins = total_weeks_sleep_hours*60\n",
    "    penalisation_factor = 1.5\n",
    "    \n",
    "    recommended_sleep_duration_mins = recommended_sleep_duration*60 \n",
    "    recommended_sleep_duration_hours = recommended_sleep_duration\n",
    "    \n",
    "    sleep_debt_mins = total_weeks_sleep_mins-recommended_sleep_duration_mins\n",
    "    sleep_debt_hours = total_weeks_sleep_hours - recommended_sleep_duration_hours\n",
    "    \n",
    "    \n",
    "    assert len(weeks_sleep) == 7, f\"Not calculating the last 7 days inclusive but{len(weeks_sleep)}\"\n",
    "    \n",
    "    if 0 <=total_weeks_sleep_mins<=3360:\n",
    "        \n",
    "        weekly_SDD_score = ((total_weeks_sleep_mins/3360)*100) + (sleep_debt_hours*penalisation_factor)\n",
    "        \n",
    "        return round(weekly_SDD_score,1)\n",
    "    \n",
    "    elif 3360 < total_weeks_sleep_mins <= 5726:\n",
    "        \n",
    "        weekly_SDD_score = 200 - ((total_weeks_sleep_mins/3360)*100) - (sleep_debt_hours*penalisation_factor)\n",
    "        return round(weekly_SDD_score,2)\n",
    "    \n",
    "    else:\n",
    "        return round(0,1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "def weekly_sleep_table(sleep_data):\n",
    "    \n",
    "    if len(sleep_data_adj_len) < 7:\n",
    "        print('Not Enough Data')\n",
    "        \n",
    "        return None\n",
    "    \n",
    "    else:\n",
    "        past7_days_Sleep_cons = weekly_sleep_consistency(bed_time_list=convert_time(sleep_data['BT'].values[-7:]), \n",
    "                                                     wake_time_list=convert_time(sleep_data['WT'].values[-7:]))\n",
    "\n",
    "\n",
    "        past7_days_SDD = weekly_SDD(recommended_sleep_duration=56, \n",
    "               weeks_sleep=sleep_data['Sleep Duration Hrs'][-7:].values)\n",
    "\n",
    "        print('Past 7 Days Sleep Consistency = {}'.format(past7_days_Sleep_cons), '\\n')\n",
    "        print('Past 7 Days SDD = {}'.format(past7_days_SDD), '\\n')\n",
    "        print('Past 7 Days Sleep Score = {}'.format(round(past7_days_Sleep_cons*0.3 + past7_days_SDD*0.7),1), '\\n')\n",
    "\n",
    "        weekly_sleep_data = pd.DataFrame()\n",
    "        weekly_sleep_data['Week Dates'] = [i for i in range(len(sleep_data)//7)]\n",
    "        weekly_sleep_data['Weekly Sleep Consistency'] = [i for i in range(len(sleep_data)//7)]\n",
    "        weekly_sleep_data['Weekly SDD'] = [i for i in range(len(sleep_data)//7)]\n",
    "        weekly_sleep_data['Weekly Sleep Debt(Hrs)'] = [i for i in range(len(sleep_data)//7)]\n",
    "        weekly_sleep_data['Weekly Sleep Score'] = [i for i in range(len(sleep_data)//7)]\n",
    "\n",
    "        if len(sleep_data)%7 ==0:\n",
    "            print('Full Week')\n",
    "\n",
    "            for i in range(len(sleep_data)//7):\n",
    "                weekly_sleep_data['Week Dates'].iloc[i] = str(sleep_data['Date'].values[0+(i*7)]) + ' to '+ str(sleep_data['Date'].values[6+(i*7)])\n",
    "                weekly_sleep_data['Weekly Sleep Consistency'].iloc[i] = weekly_sleep_consistency(bed_time_list=convert_time(sleep_data['BT'][0+(i*7):7+(i*7)].values), \n",
    "                                                                                         wake_time_list=convert_time(sleep_data['WT'][0+(i*7):7+(i*7)].values))\n",
    "                weekly_sleep_data['Weekly SDD'].iloc[i] = weekly_SDD(recommended_sleep_duration=56, weeks_sleep=sleep_data['Sleep Duration Hrs'][0+(i*7):7+(i*7)].values)\n",
    "                weekly_sleep_data['Weekly Sleep Debt(Hrs)'].iloc[i] = sum(sleep_data['Sleep Duration Hrs'][0+(i*7):7+(i*7)].values) - 56\n",
    "                weekly_sleep_data['Weekly Sleep Score'].iloc[i] = round(weekly_sleep_data['Weekly Sleep Consistency'][i]*0.3 + weekly_sleep_data['Weekly SDD'][i]*0.7,1)\n",
    "            return weekly_sleep_data \n",
    "\n",
    "        else:\n",
    "            print('Do not have full {} weeks data, can only display {} weeks data'.format(int(len(sleep_data)/7+1),len(sleep_data)//7))\n",
    "\n",
    "            for i in range(len(sleep_data)//7):\n",
    "                weekly_sleep_data['Week Dates'] = [str(sleep_data['Date'].values[0+(i*7)]) + ' to '+ str(sleep_data['Date'].values[6+(i*7)])]\n",
    "                weekly_sleep_data['Weekly Sleep Consistency'] = weekly_sleep_consistency(bed_time_list=convert_time(sleep_data['BT'][0+(i*7):7+(i*7)].values), wake_time_list=convert_time(sleep_data['WT'][0+(i*7):7+(i*7)].values))\n",
    "                weekly_sleep_data['Weekly SDD'] = weekly_SDD(recommended_sleep_duration=56, weeks_sleep=sleep_data['Sleep Duration Hrs'][0+(i*7):7+(i*7)].values)\n",
    "                weekly_sleep_data['Weekly Sleep Debt(Hrs)'] = sum(sleep_data['Sleep Duration Hrs'][0+(i*7):7+(i*7)].values) - 56\n",
    "                weekly_sleep_data['Weekly Sleep Score'] = round(weekly_sleep_data['Weekly Sleep Consistency'][i]*0.3 + weekly_sleep_data['Weekly SDD'][i]*0.7,1)\n",
    "            \n",
    "        return weekly_sleep_data "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Not Enough Data\n"
     ]
    }
   ],
   "source": [
    "weekly_sleep_table(sleep_data_adj_len)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exercise data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "def count_consec_ex_mins(listrand:list, consec_mins:int, print_txt= False):\n",
    "    \n",
    "    count=1\n",
    "    consec_list=[]\n",
    "    \n",
    "    #Count consecutives\n",
    "    for i in range(len(listrand[:-1])):\n",
    "        if listrand[i]+1 == listrand[i+1]:\n",
    "            count+=1\n",
    "        else:\n",
    "            consec_list.append(count)\n",
    "            count=1\n",
    "\n",
    "    # Account for the last iteration\n",
    "    consec_list.append(count)     \n",
    "    \n",
    "    final_lst = []\n",
    "    \n",
    "    for i in range(len(consec_list)):\n",
    "        if consec_list[i] > consec_mins:\n",
    "            final_lst.append(consec_list[i])\n",
    "        else:\n",
    "            continue\n",
    "    \n",
    "    if print_txt == True:\n",
    "        print(final_lst)\n",
    "    \n",
    "    return sum(final_lst)\n",
    "\n",
    "def daily_ex_score(vig_mins:int, mod_mins:int):\n",
    "    w1 = 3.72093023\n",
    "    w2 = 0.93023256\n",
    "    ex_mins = (vig_mins*2) + mod_mins\n",
    "    \n",
    "    if 0<=ex_mins<=21.5:\n",
    "        ex_score = ex_mins*w1\n",
    "        return round(ex_score,1)\n",
    "\n",
    "    elif 21.5<ex_mins<=43:\n",
    "        ex_score = 80 + (ex_mins-21.5)*w2\n",
    "        return round(ex_score, 1)\n",
    "\n",
    "    else:\n",
    "        return 100 \n",
    "\n",
    "def weekly_ex_score(vig_mins:int, mod_mins:int):\n",
    "    \n",
    "    ex_mins =(vig_mins*2)+mod_mins\n",
    "    w1 = 0.53333333\n",
    "    w2 = 0.13333333\n",
    "    \n",
    "    if 0<=ex_mins<=150:\n",
    "        ex_score = ex_mins*w1\n",
    "        return round(ex_score,1)\n",
    "\n",
    "    elif 150<ex_mins<=300:\n",
    "        ex_score = 80 + (ex_mins-150)*w2\n",
    "        return round(ex_score, 1)\n",
    "\n",
    "    else:\n",
    "        return 100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Calculate Age\n",
    "age_data = pd.read_csv(age_csv)\n",
    "bday = datetime.strptime(age_data['birthday'][0], '%Y-%m')\n",
    "today = date.today()\n",
    "age = int(str(today)[0:4]) - int(str(bday)[0:4])\n",
    "\n",
    "#Calculate maximal HR and Vig and Mod HR thresholds\n",
    "#Mod = 64% and Vig = 77% based on https://www.cdc.gov/physicalactivity/basics/measuring/heartrate.htm\n",
    "\n",
    "maximal_hr = 220-age\n",
    "mod_thresh = int(maximal_hr*0.6)\n",
    "vig_thresh = int(maximal_hr*0.75)\n",
    "\n",
    "#Load in Exercise data \n",
    "ex_data_all = pd.read_csv(ex_csv)\n",
    "dates = sorted(list(set(ex_data_all['date'])))[:]\n",
    "# wake_time_int = [int(i.strftime('%H%M')) for i in ex_df['Wake Time'].values]\n",
    "# w_times_bhr = [(int(str(i)[0:2])*60) + (int(str(i)[3:5])) for i in ex_df['Wake Time'].values]\n",
    "\n",
    "ex_df = pd.DataFrame()\n",
    "ex_df['Date'] = sleep_data_adj_len['Date'].values\n",
    "ex_df['Bed Time'] = sleep_data_adj_len['BT'].values\n",
    "ex_df['Wake Time'] = sleep_data_adj_len['WT'].values\n",
    "\n",
    "total_ex_mins = [] \n",
    "vig_ex_mins = [] \n",
    "mod_ex_mins = [] \n",
    "\n",
    "#Filtering ex data and calculating consecutive mins above certain thresholds\n",
    "consec_mins = 5\n",
    "print_txt = False\n",
    "for i in range(len(ex_df)):\n",
    "#     total_ex_mins.append(count_consec_ex_mins([i for i in ex_data_all[(ex_data_all['date'] == dates[i]) & (ex_data_all['heartRate'] >= mod_thresh)].index],consec_mins))\n",
    "    mod_ex_mins.append(count_consec_ex_mins([i for i in ex_data_all[(ex_data_all['date'] == dates[i]) & (ex_data_all['heartRate'] >= mod_thresh) & (vig_thresh >= ex_data_all['heartRate'])].index],consec_mins))\n",
    "    vig_ex_mins.append(count_consec_ex_mins([i for i in ex_data_all[(ex_data_all['date'] == dates[i]) & (ex_data_all['heartRate'] >= vig_thresh)].index],consec_mins))\n",
    "    total_ex_mins.append(count_consec_ex_mins([i for i in ex_data_all[(ex_data_all['date'] == dates[i]) & (ex_data_all['heartRate'] >= mod_thresh) & (vig_thresh >= ex_data_all['heartRate'])].index],consec_mins) + count_consec_ex_mins([i for i in ex_data_all[(ex_data_all['date'] == dates[i]) & (ex_data_all['heartRate'] >= vig_thresh)].index],consec_mins))\n",
    "##Can use the following code to double check number of consecutive minutes being found per date    \n",
    "# print(dates[2])\n",
    "# count_consec_ex_mins([i for i in ex_data_all[(ex_data_all['date'] == dates[2]) & (ex_data_all['heartRate'] >= mod_thresh)].index],consec_mins, print_txt=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/tomaszkostuch/opt/anaconda3/lib/python3.8/site-packages/pandas/core/indexing.py:670: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  iloc._setitem_with_indexer(indexer, value)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Bed Time</th>\n",
       "      <th>Wake Time</th>\n",
       "      <th>Exercise Mins</th>\n",
       "      <th>Moderate Ex Mins</th>\n",
       "      <th>Vig Ex Mins</th>\n",
       "      <th>Daily Ex Score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>14/11/2021</td>\n",
       "      <td>07:27:00</td>\n",
       "      <td>14:04:00</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>29.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>15/11/2021</td>\n",
       "      <td>21:35:00</td>\n",
       "      <td>07:05:00</td>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>16/11/2021</td>\n",
       "      <td>22:40:00</td>\n",
       "      <td>06:36:00</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>22.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>17/11/2021</td>\n",
       "      <td>22:12:00</td>\n",
       "      <td>06:31:00</td>\n",
       "      <td>9</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>33.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Date  Bed Time Wake Time  Exercise Mins  Moderate Ex Mins  \\\n",
       "0  14/11/2021  07:27:00  14:04:00              8                 8   \n",
       "1  15/11/2021  21:35:00  07:05:00              7                 7   \n",
       "2  16/11/2021  22:40:00  06:36:00              6                 6   \n",
       "3  17/11/2021  22:12:00  06:31:00              9                 9   \n",
       "\n",
       "   Vig Ex Mins Daily Ex Score  \n",
       "0            0           29.8  \n",
       "1            0             26  \n",
       "2            0           22.3  \n",
       "3            0           33.5  "
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Creating Ex Table\n",
    "ex_df['Exercise Mins'] = total_ex_mins \n",
    "ex_df['Moderate Ex Mins'] = mod_ex_mins\n",
    "ex_df['Vig Ex Mins'] = vig_ex_mins\n",
    "ex_df['Daily Ex Score'] = ''\n",
    "\n",
    "for i in range(len(ex_df)):\n",
    "    ex_df['Daily Ex Score'].iloc[i] = daily_ex_score(vig_mins=ex_df['Vig Ex Mins'].values[i], mod_mins=ex_df['Moderate Ex Mins'].values[i])\n",
    "\n",
    "ex_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "def weekly_ex_table(ex_df):\n",
    "    \n",
    "    if len(ex_df) < 7:\n",
    "        print('Not Enough Data')\n",
    "        return None\n",
    "    \n",
    "    else:\n",
    "    \n",
    "        weekly_ex_data = pd.DataFrame()\n",
    "        weekly_ex_data['Week'] = [i for i in range(len(ex_df)//7)]\n",
    "        weekly_ex_data['Total Ex Mins'] = [i for i in range(len(ex_df)//7)]\n",
    "        weekly_ex_data['Total Vig Mins'] = [i for i in range(len(ex_df)//7)]\n",
    "        weekly_ex_data['Total Mod Mins'] = [i for i in range(len(ex_df)//7)]\n",
    "        weekly_ex_data['Weekly Exercise Score'] = [i for i in range(len(ex_df)//7)]\n",
    "        weekly_ex_data['Average Exercise Mins per Day'] = [i for i in range(len(ex_df)//7)]\n",
    "\n",
    "        if len(ex_df)%7 == 0:\n",
    "            print('Full {} Weeks Data'.format(int(len(ex_df)/7)))\n",
    "            for i in range(len(ex_df)//7):\n",
    "                weekly_ex_data['Week'].iloc[i]= str(ex_df['Date'].values[0+(i*7)]) + ' to '+ str(ex_df['Date'].values[0+(i*7)])\n",
    "                weekly_ex_data['Total Ex Mins'].iloc[i] = sum(ex_df['Exercise Mins'][0+(i*7):7+(i*7)])\n",
    "                weekly_ex_data['Total Vig Mins'].iloc[i] = sum(ex_df['Vig Ex Mins'][0+(i*7):7+(i*7)])\n",
    "                weekly_ex_data['Total Mod Mins'].iloc[i] = sum(ex_df['Moderate Ex Mins'][0+(i*7):7+(i*7)])\n",
    "                weekly_ex_data['Weekly Exercise Score'].iloc[i] = weekly_ex_score(vig_mins = weekly_ex_data['Total Vig Mins'].values[i], mod_mins=weekly_ex_data['Total Mod Mins'].values[i])\n",
    "                weekly_ex_data['Average Exercise Mins per Day'].iloc[i] = round(weekly_ex_data['Total Ex Mins'][i]/7,1)\n",
    "\n",
    "            return weekly_ex_data \n",
    "\n",
    "        else:\n",
    "            print('Do not have full {} weeks data, can only display {} weeks data'.format(int(len(ex_df)/7+1),len(ex_df)//7))\n",
    "\n",
    "            for i in range(len(ex_df)//7):\n",
    "                weekly_ex_data['Week'].iloc[i] = str(ex_df['Date'].values[0+(i*7)]) + ' to '+ str(ex_df['Date'].values[6+(i*7)])\n",
    "                weekly_ex_data['Total Ex Mins'].iloc[i] = sum(ex_df['Exercise Mins'][0+(i*7):7+(i*7)])\n",
    "                weekly_ex_data['Total Vig Mins'].iloc[i] = sum(ex_df['Vig Ex Mins'][0+(i*7):7+(i*7)])\n",
    "                weekly_ex_data['Total Mod Mins'].iloc[i] = sum(ex_df['Moderate Ex Mins'][0+(i*7):7+(i*7)])\n",
    "                weekly_ex_data['Weekly Exercise Score'].iloc[i] = weekly_ex_score(vig_mins = weekly_ex_data['Total Vig Mins'].values[i], mod_mins=weekly_ex_data['Total Mod Mins'].values[i])\n",
    "                weekly_ex_data['Average Exercise Mins per Day'].iloc[i] = round(weekly_ex_data['Total Ex Mins'][i]/7,1)\n",
    "\n",
    "\n",
    "            return weekly_ex_data "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Not Enough Data\n"
     ]
    }
   ],
   "source": [
    "weekly_ex_table(ex_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>BT</th>\n",
       "      <th>WT</th>\n",
       "      <th>Sleep Duration Mins</th>\n",
       "      <th>Sleep Duration Hrs</th>\n",
       "      <th>Daily Sleep Debt</th>\n",
       "      <th>Daily Sleep Consistency</th>\n",
       "      <th>Daily SDD</th>\n",
       "      <th>Daily Sleep Score</th>\n",
       "      <th>Exercise Mins</th>\n",
       "      <th>Moderate Ex Mins</th>\n",
       "      <th>Vig Ex Mins</th>\n",
       "      <th>Daily Ex Score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>18/11/2021</td>\n",
       "      <td>19:30:00</td>\n",
       "      <td>03:06:00</td>\n",
       "      <td>456</td>\n",
       "      <td>7.61</td>\n",
       "      <td>0.00</td>\n",
       "      <td>100.0</td>\n",
       "      <td>95.1</td>\n",
       "      <td>96.57</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>15/11/2021</td>\n",
       "      <td>20:24:00</td>\n",
       "      <td>03:57:00</td>\n",
       "      <td>453</td>\n",
       "      <td>7.55</td>\n",
       "      <td>-0.45</td>\n",
       "      <td>81.0</td>\n",
       "      <td>93.6</td>\n",
       "      <td>89.82</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>16/11/2021</td>\n",
       "      <td>18:54:00</td>\n",
       "      <td>01:54:00</td>\n",
       "      <td>420</td>\n",
       "      <td>7.00</td>\n",
       "      <td>-1.00</td>\n",
       "      <td>73.0</td>\n",
       "      <td>85.8</td>\n",
       "      <td>81.96</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>17/11/2021</td>\n",
       "      <td>19:12:00</td>\n",
       "      <td>03:28:00</td>\n",
       "      <td>496</td>\n",
       "      <td>8.27</td>\n",
       "      <td>0.27</td>\n",
       "      <td>77.3</td>\n",
       "      <td>92.9</td>\n",
       "      <td>88.22</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>22.3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Date        BT        WT  Sleep Duration Mins  Sleep Duration Hrs  \\\n",
       "0  18/11/2021  19:30:00  03:06:00                  456                7.61   \n",
       "1  15/11/2021  20:24:00  03:57:00                  453                7.55   \n",
       "2  16/11/2021  18:54:00  01:54:00                  420                7.00   \n",
       "3  17/11/2021  19:12:00  03:28:00                  496                8.27   \n",
       "\n",
       "   Daily Sleep Debt  Daily Sleep Consistency  Daily SDD  Daily Sleep Score  \\\n",
       "0              0.00                    100.0       95.1              96.57   \n",
       "1             -0.45                     81.0       93.6              89.82   \n",
       "2             -1.00                     73.0       85.8              81.96   \n",
       "3              0.27                     77.3       92.9              88.22   \n",
       "\n",
       "   Exercise Mins  Moderate Ex Mins  Vig Ex Mins Daily Ex Score  \n",
       "0              0                 0            0            0.0  \n",
       "1              0                 0            0            0.0  \n",
       "2              0                 0            0            0.0  \n",
       "3              6                 6            0           22.3  "
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_daily_data_table = pd.merge(sleep_data_adj_len,\n",
    "                                  ex_df[['Exercise Mins', 'Moderate Ex Mins', 'Vig Ex Mins', 'Daily Ex Score']],\n",
    "                                  left_index=True, right_index=True)\n",
    "\n",
    "final_daily_data_table"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Sleep Debt Positive + Negative "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "def add_accumulated_sleep_debt(df):\n",
    "\n",
    "    asd = [] \n",
    "\n",
    "    df.insert(6,'Sleep Debt(Neg)', '')\n",
    "    df.insert(7,'Sleep Debt(Pos)', '')\n",
    "\n",
    "    for i in range(len(df)):\n",
    "        asd.append(sum(df['Daily Sleep Debt'][:i+1]))\n",
    "\n",
    "        if df['Daily Sleep Debt'][i] > 0:\n",
    "            df['Sleep Debt(Pos)'][i] = df['Daily Sleep Debt'][i]\n",
    "            df['Sleep Debt(Neg)'][i] = 0 \n",
    "\n",
    "        else:\n",
    "            df['Sleep Debt(Pos)'][i] = 0 \n",
    "            df['Sleep Debt(Neg)'][i] = df['Daily Sleep Debt'][i]\n",
    "\n",
    "    df.insert(8,'ASD',asd)\n",
    "    \n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "cannot insert Sleep Debt(Neg), already exists",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Input \u001b[0;32mIn [89]\u001b[0m, in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0m final_daily_data_table \u001b[38;5;241m=\u001b[39m \u001b[43madd_accumulated_sleep_debt\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfinal_daily_data_table\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m      2\u001b[0m final_daily_data_table\n",
      "Input \u001b[0;32mIn [62]\u001b[0m, in \u001b[0;36madd_accumulated_sleep_debt\u001b[0;34m(df)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21madd_accumulated_sleep_debt\u001b[39m(df):\n\u001b[1;32m      3\u001b[0m     asd \u001b[38;5;241m=\u001b[39m [] \n\u001b[0;32m----> 5\u001b[0m     \u001b[43mdf\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43minsert\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m6\u001b[39;49m\u001b[43m,\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mSleep Debt(Neg)\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m      6\u001b[0m     df\u001b[38;5;241m.\u001b[39minsert(\u001b[38;5;241m7\u001b[39m,\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mSleep Debt(Pos)\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m      8\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m i \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(\u001b[38;5;28mlen\u001b[39m(df)):\n",
      "File \u001b[0;32m~/.local/lib/python3.8/site-packages/pandas/core/frame.py:4442\u001b[0m, in \u001b[0;36mDataFrame.insert\u001b[0;34m(self, loc, column, value, allow_duplicates)\u001b[0m\n\u001b[1;32m   4436\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m   4437\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mCannot specify \u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mallow_duplicates=True\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m when \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m   4438\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mself.flags.allows_duplicate_labels\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m is False.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m   4439\u001b[0m     )\n\u001b[1;32m   4440\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m allow_duplicates \u001b[38;5;129;01mand\u001b[39;00m column \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcolumns:\n\u001b[1;32m   4441\u001b[0m     \u001b[38;5;66;03m# Should this be a different kind of error??\u001b[39;00m\n\u001b[0;32m-> 4442\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcannot insert \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mcolumn\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m, already exists\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m   4443\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(loc, \u001b[38;5;28mint\u001b[39m):\n\u001b[1;32m   4444\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mloc must be int\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "\u001b[0;31mValueError\u001b[0m: cannot insert Sleep Debt(Neg), already exists"
     ]
    }
   ],
   "source": [
    "final_daily_data_table = add_accumulated_sleep_debt(final_daily_data_table)\n",
    "final_daily_data_table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Send Data? (Yes/No): yes\n"
     ]
    }
   ],
   "source": [
    "webhook_send(final_daily_data_table)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Plot Exercise vs time "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_ex(df, num_of_days_to_show:int):\n",
    "    \n",
    "    #Adjustments for graphs\n",
    "    bar_adj_2 = [0,0.07,0.17,0.27,0.32,0.45,0.55,0.75]\n",
    "    ant_adj = [0,0.0225,0.059,0.095,0.12,0.15,0.17,0.21]\n",
    "    optimal_adj_2 = [0,0.02,0.05,0.1,0.12,0.13,0.13,0.2] \n",
    "    sufficient_adj_2 = [0,0.022,0.052,0.112,0.14,0.14,0.14,0.24] \n",
    "    low_adj_2 = [0,0.013,0.032,0.07,0.08,0.08,0.08,0.13] \n",
    "    \n",
    "    df = df[-num_of_days_to_show:]\n",
    "    df.reset_index(drop=True, inplace=True)\n",
    "    df.insert(0,'Date Labels', final_date_labels)\n",
    "    \n",
    "    \n",
    "    fig, axes = plt.subplots(2,1, sharex=True,figsize=(10,10))\n",
    "    c_map_1 = {'Moderate Ex Mins':'seagreen', 'Vig Ex Mins':'salmon'}\n",
    "    \n",
    "    \n",
    "    if len(df) < 2:\n",
    "        df[-num_of_days_to_show:].plot(kind='line', x='Date Labels', y= 'Daily Ex Score', ax=axes[0], \n",
    "                     marker='o', markersize=5)\n",
    "    else:\n",
    "        df[-num_of_days_to_show:-1].plot(kind='line', x='Date Labels', y= 'Daily Ex Score', ax=axes[0], \n",
    "                     marker='o', markersize=5)\n",
    "\n",
    "    sns.despine()\n",
    "\n",
    "    axes[1].set_ylim(0,140)\n",
    "    axes[0].set_ylim(-1.5,101)\n",
    "    axes[1].tick_params(axis='x', labelsize=15)\n",
    "    axes[0].tick_params(axis='y', labelsize=15)\n",
    "    axes[1].tick_params(axis='y', labelsize=15)\n",
    "    \n",
    "    x = [-1]+[i for i in range(num_of_days_to_show)]+[num_of_days_to_show+1]\n",
    "    red_zone = [50]*(num_of_days_to_show+2)\n",
    "    yellow_zone= [75]*(num_of_days_to_show+2)\n",
    "\n",
    "\n",
    "    #Shading Areas behind the graph \n",
    "    axes[0].fill_between(x, red_zone, -1.5,\n",
    "                     facecolor=\"orange\", # The fill color\n",
    "                     color='red',       # The outline color\n",
    "                     alpha=0.2)\n",
    "\n",
    "    axes[0].fill_between(x, red_zone, 75,\n",
    "                     facecolor=\"orange\", # The fill color\n",
    "                     color='yellow',       # The outline color\n",
    "                     alpha=0.2)\n",
    "\n",
    "    axes[0].fill_between(x, yellow_zone, 100,\n",
    "                     facecolor=\"orange\", # The fill color\n",
    "                     color='green',       # The outline color\n",
    "                     alpha=0.2)\n",
    "\n",
    "    colors = ['acquamarine', 'lime']\n",
    "\n",
    "    le = df[-num_of_days_to_show:].plot(kind='bar', stacked='True', \n",
    "                     x='Date Labels', y = ['Moderate Ex Mins','Vig Ex Mins'],\n",
    "                     ax=axes[1],width=bar_adj_2[num_of_days_to_show], rot=0, color=c_map_1, xlabel='')\n",
    "\n",
    "\n",
    "    for i in range(num_of_days_to_show):\n",
    "        axes[1].annotate(str(df['Exercise Mins'][-num_of_days_to_show:][i]) + ' Mins',\n",
    "                         xy=(i-ant_adj[num_of_days_to_show],df['Exercise Mins'][-num_of_days_to_show:][i]+2),fontsize=12)\n",
    "\n",
    "    axes[0].annotate('Optimal', xy=(((axes[0].get_xlim()[0] + axes[0].get_xlim()[1])/2)-optimal_adj_2[num_of_days_to_show],95), size=12)\n",
    "    axes[0].annotate('Sufficient', xy=(((axes[0].get_xlim()[0] + axes[0].get_xlim()[1])/2)-sufficient_adj_2[num_of_days_to_show],62.5), size=12)\n",
    "    axes[0].annotate('Low', xy=(((axes[0].get_xlim()[0] + axes[0].get_xlim()[1])/2)-low_adj_2[num_of_days_to_show], 30), size=12)\n",
    "    axes[1].grid(axis='y', linewidth=0.07)\n",
    "    \n",
    "    return fig, axes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(<Figure size 720x720 with 2 Axes>,\n",
       " array([<AxesSubplot:xlabel='Date Labels'>, <AxesSubplot:>], dtype=object))"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_ex(final_daily_data_table, num_days_shown)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Plot Sleep vs time "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_sleep_time(df, num_of_days_to_show):\n",
    "    \n",
    "    #Graph adjustments\n",
    "    optimal_adj_3 = [0,-0.12,-0.09,-0.07,-0.07,0,0,0] \n",
    "    sufficient_adj_3 = [0,-0.119,-0.085,-0.06,-0.04,0.04,0.04,0.04] \n",
    "    low_adj_3 = [0,-0.125,-0.11,-0.1,-0.1,-0.08,-0.08,-0.07] \n",
    "    bar_adj_3 = [0,0.05,0.125,0.175,0.2,0.25,0.35,0.45]\n",
    "    \n",
    "    c_map = {'Sleep Debt(Pos)':'green', 'Sleep Debt(Neg)':'red'}\n",
    "\n",
    "    fig, axes = plt.subplots(2,1, sharex=True,figsize=(10,10))\n",
    "\n",
    "    df = df[-num_of_days_to_show:]\n",
    "    df.reset_index(drop=True, inplace=True)\n",
    "    df.insert(0,'Date Labels', final_date_labels)\n",
    "    \n",
    "    df[-num_of_days_to_show:].plot(kind='line', x = 'Date Labels', y = 'Daily Sleep Score', ax=axes[0],\n",
    "                     marker='o', markersize=5, )\n",
    "\n",
    "    df.plot.area(x='Date', y='ASD', ax=axes[1], style='-o', alpha=0.3, stacked=False)\n",
    "\n",
    "    df[-num_of_days_to_show:].plot(kind='bar', x='Date Labels', y = ['Sleep Debt(Pos)','Sleep Debt(Neg)'], \n",
    "                                             width=bar_adj_3[num_of_days_to_show],align='center', ax=axes[1], color=c_map, stacked=True, \n",
    "                                            rot=0)\n",
    "\n",
    "\n",
    "    sns.despine()\n",
    "    axes[0].set_ylim(0,101)\n",
    "    axes[1].set_ylim(-5,5)\n",
    "    # axes[0].set_ylabel('Daily \\n Sleep \\n Performance', rotation=0, labelpad=30, size=13)\n",
    "    # axes[1].set_ylabel('Hours', rotation=0, \n",
    "    #                    labelpad=25, size=13)\n",
    "    # axes[1].set_xlabel('Date',labelpad=15, size=15)\n",
    "    axes[1].tick_params(axis='x', labelsize=14)\n",
    "    axes[0].tick_params(axis='y', labelsize=14)\n",
    "    axes[1].tick_params(axis='y', labelsize=14)\n",
    "    axes[1].grid(axis='y', linewidth=0.07)\n",
    "\n",
    "    x = [-1]+[i for i in range(num_of_days_to_show)]+[num_of_days_to_show+1]\n",
    "    red_zone = [50]*(num_of_days_to_show+2)\n",
    "    yellow_zone= [75]*(num_of_days_to_show+2)\n",
    "\n",
    "\n",
    "    #Shading Areas behind the graph \n",
    "    axes[0].fill_between(x, red_zone, 0,\n",
    "                     facecolor=\"orange\", # The fill color\n",
    "                     color='red',       # The outline color\n",
    "                     alpha=0.2)\n",
    "\n",
    "    axes[0].fill_between(x, red_zone, 75,\n",
    "                     facecolor=\"orange\", # The fill color\n",
    "                     color='yellow',       # The outline color\n",
    "                     alpha=0.2)\n",
    "\n",
    "    axes[0].fill_between(x, yellow_zone, 100,\n",
    "                     facecolor=\"orange\", # The fill color\n",
    "                     color='green',       # The outline color\n",
    "                     alpha=0.2)\n",
    "\n",
    "    axes[0].annotate('Optimal', xy=((axes[0].get_xlim()[0] + axes[0].get_xlim()[1]/2 -optimal_adj_3[num_of_days_to_show],97)), size=13)\n",
    "    axes[0].annotate('Sufficient', xy=((axes[0].get_xlim()[0] + axes[0].get_xlim()[1]/2 - sufficient_adj_3[num_of_days_to_show],62.5)), size=13)\n",
    "    axes[0].annotate('Low', xy=((axes[0].get_xlim()[0] + axes[0].get_xlim()[1]/2 - low_adj_3[num_of_days_to_show],30)), size=13)\n",
    "    \n",
    "    return fig, axes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(<Figure size 720x720 with 2 Axes>,\n",
       " array([<AxesSubplot:xlabel='Date Labels'>,\n",
       "        <AxesSubplot:xlabel='Date Labels'>], dtype=object))"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_sleep_time(final_daily_data_table, num_days_shown)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Final Weekly Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Not Enough Data\n"
     ]
    }
   ],
   "source": [
    "weekly_sleep = weekly_sleep_table(sleep_data_adj_len)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Not Enough Data\n"
     ]
    }
   ],
   "source": [
    "weekly_ex = weekly_ex_table(ex_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [],
   "source": [
    "weekly_ex"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [],
   "source": [
    "def final_weekly_table(weekly_ex, weekly_sleep):\n",
    "    \n",
    "    if ((weekly_ex is None) and (weekly_sleep is None)):\n",
    "        \n",
    "        print('Not Enough Data')\n",
    "        \n",
    "        return None\n",
    "    else:\n",
    "        \n",
    "        if len(weekly_ex) > 0:\n",
    "\n",
    "            weekly_ex_data_final = weekly_ex.drop('Week', axis=1)\n",
    "            weekly_data_all = pd.merge(weekly_sleep,weekly_ex, left_index=True, right_index=True)\n",
    "            weekly_data_all.columns\n",
    "\n",
    "        else:\n",
    "            weekly_data_all = pd.merge(weekly_sleep_data,weekly_ex_data, left_index=True, right_index=True)\n",
    "\n",
    "        weekly_data_all.drop('Week', axis=1, inplace=True)  \n",
    "    \n",
    "        return weekly_data_all\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Not Enough Data\n"
     ]
    }
   ],
   "source": [
    "final_weekly_table(weekly_ex, weekly_sleep)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Predicting Performance "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [],
   "source": [
    "def roundTime(dt=None, roundTo=60):\n",
    "   \"\"\"Round a datetime object to any time lapse in seconds\n",
    "   dt : datetime.datetime object, default now.\n",
    "   roundTo : Closest number of seconds to round to, default 1 minute.\n",
    "   Author: Thierry Husson 2012 - Use it as you want but don't blame me.\n",
    "   \"\"\"\n",
    "   if dt == None : dt = datetime.datetime.now()\n",
    "   seconds = (dt.replace(tzinfo=None) - dt.min).seconds\n",
    "   rounding = (seconds+roundTo/2) // roundTo * roundTo\n",
    "   return dt + timedelta(0,rounding-seconds,-dt.microsecond)\n",
    "\n",
    "def create_sleep_cycle_df(df, bt_dt_form:list, wt_dt_form:list, days_to_calculate:int, avg_cycle_start_print=False):\n",
    "    \"\"\"\n",
    "    Calculates Sleep Midpoints, Cycle Starts and Sleep Chronotype. \n",
    "    \n",
    "    Returns a pandas dataframe with relvant data and the average cycle start time. \n",
    "    \n",
    "    \"\"\"\n",
    "    from statistics import mode\n",
    "    \n",
    "    sleep_duration_halved = [i for i in round(df['Sleep Duration Hrs']/2,1)]\n",
    "\n",
    "    sleep_cycle = pd.DataFrame()\n",
    "    sleep_midpoints = [] \n",
    "\n",
    "    #Calculating sleep midpoints by adding half of the sleep duration to the bedtime\n",
    "    for i in range(len(df)):\n",
    "        sleep_midpoints.append(bt_dt_form[i]+ timedelta(hours=int(str(sleep_duration_halved[i]).split('.')[0]), minutes=int(int(str(sleep_duration_halved[i]).split('.')[1])*0.1*60)))     \n",
    "\n",
    "    sleep_cycle['Date'] = [i.date() for i in wt_dt_form]\n",
    "    sleep_cycle['Day'] = [i.strftime('%A') for i in sleep_cycle['Date']]\n",
    "    sleep_cycle['Sleep Midpoint'] = [i.time() for i in sleep_midpoints]\n",
    "    cycle_starts = [roundTime(i,roundTo=3600) for i in wt_dt_form]\n",
    "    sleep_cycle['Cycle Starts'] = [i.time() for i in cycle_starts]\n",
    "    act_cycle_starts = [i for i in wt_dt_form]\n",
    "    sleep_cycle['Actual Cycle Starts'] = act_cycle_starts\n",
    "    \n",
    "    #Calculating Avg Cycle Start Time \n",
    "    avg_cycle_start = roundTime(avg_time(sleep_cycle['Cycle Starts']),roundTo=1800)\n",
    "    \n",
    "    if avg_cycle_start_print == True:                      \n",
    "        print('Average Cycle Start Time = {}'.format(avg_cycle_start.time()),'\\n')\n",
    "\n",
    "    #Calculating Sleep Chronotype\n",
    "    sleep_cycle['Sleeping Chronotype'] = ''\n",
    "\n",
    "    three_am = datetime(6,1,2,3,0).time()\n",
    "    six_am = datetime(6,1,2,6,0).time()\n",
    "    midnight = datetime(6,1,2,0,0).time()\n",
    "\n",
    "    sleep_chrono_type = []\n",
    "    \n",
    "    for i in range(len(sleep_midpoints)):\n",
    "\n",
    "        if midnight > sleep_midpoints[i].time() > six_am:\n",
    "            sleep_chrono_type.append('Night Owl')\n",
    "\n",
    "        elif three_am > sleep_midpoints[i].time()> midnight:\n",
    "            sleep_chrono_type.append('Lark')\n",
    "\n",
    "        else:\n",
    "            sleep_chrono_type.append('Third Bird')\n",
    "\n",
    "\n",
    "    sleep_cycle['Sleeping Chronotype'] = sleep_chrono_type\n",
    "    \n",
    "    if len(sleep_cycle) < days_to_calculate:\n",
    "        print('Your Sleep Chronotype is currently being determined, ready in {} days'.format(days_to_calculate - len(sleep_cycle)))\n",
    "    \n",
    "    else:\n",
    "        print('Your Sleeping Type is {}'.format(mode(list(sleep_cycle['Sleeping Chronotype'].values))))\n",
    "    \n",
    "      \n",
    "    return sleep_cycle, avg_cycle_start\n",
    "\n",
    "def calculate_avg_cs_per_day(df):\n",
    "    \"\"\"\n",
    "    Calculates the average cycle starts per each day of the week.\n",
    "    \n",
    "    Returns Datagrame with results and the dictionary with the values \n",
    "    \"\"\"\n",
    "    \n",
    "    days_of_week = list(set(sleep_cycle_df['Day'].values))\n",
    "    avg_cycle_starts_per_day = {} \n",
    "    dict_list_cycle_starts = {} \n",
    "\n",
    "    #Calculating the average and rounding then storeing in Dictionary\n",
    "    for i in range(len(days_of_week)):\n",
    "\n",
    "        #Dict with the averages for each day \n",
    "        avg_cycle_starts_per_day[days_of_week[i]]= roundTime(avg_time(df[sleep_cycle_df['Day'] == days_of_week[i]]['Actual Cycle Starts']), roundTo=1800)\n",
    "\n",
    "        #Dict with list of cycle starts for each day \n",
    "        dict_list_cycle_starts[days_of_week[i]] = df[sleep_cycle_df['Day'] == days_of_week[i]]['Actual Cycle Starts']\n",
    "\n",
    "    #Creating DF\n",
    "    avg_cycle_per_day= pd.DataFrame.from_dict(data = {'Avg Cycle Start Time':[i.time() for i in avg_cycle_starts_per_day.values()], \n",
    "                                   'Day':avg_cycle_starts_per_day.keys()})\n",
    "    return avg_cycle_per_day,avg_cycle_starts_per_day\n",
    "    \n",
    "def calculating_hrly_perf_capacity(sleep_df, final_daily_df, sleep_cycle_df):\n",
    "    \"\"\"\n",
    "    Calculates the performance capacity values for every half hour of the day using sleep and exercise data.\n",
    "    \n",
    "    \"\"\"\n",
    "    \n",
    "    ## ThirdBird Graph preset built of someone who's sleep midpoint is 3 and sleeps total of 8 hours so cycle starts at 7 \n",
    "    ### Will have to shift numbers accordingly\n",
    "    ### e.g. if someones cycles starts at 5 and are 3rdbird then has to shift by -2\n",
    "    #### Amount to shift array = cycle start - 7  \n",
    "    ##### From 7AM to 6AM(Next Day)\n",
    "    lark_third_bird_hardcoded = [50,57.5,65,75,90,100,90,75,50,60,70,80,85,80,70,60,50,45,30,25,25,25,30,40]\n",
    "\n",
    "\n",
    "    ## NightOwl Graph preset built of someone who's sleep midpoint is 6 and sleeps total of 8 hours so cycle starts at 10 \n",
    "    ### Will have to shift numbers accordingly\n",
    "    ### e.g. if someones cycles starts at 7 and are nightowl then has to shift by +1\n",
    "    #### Amount to shift array = cycle start - 6  \n",
    "    #####These start from 5AM to 4AM(Next Day)\n",
    "    night_owl_harcoded = [25.0,25.0,30.0,45.0,50.0,60.0,70.0,80.0,85.0,80.0,70.0,60.0,50.0,75.0,90.0,100.0,90.0,75.0,65.0,57.5,50.0,40.0,30.0,25.0]\n",
    "\n",
    "    last_7_days = sleep_df[-6:]\n",
    "    prdikt_perf_capacity = round((last_7_days['Daily Sleep Score'].values[-1]*0.7)+ (weekly_ex_score(mod_mins = sum(final_daily_df['Moderate Ex Mins']), vig_mins = sum(final_daily_df['Vig Ex Mins']))*0.3),1)\n",
    "\n",
    "    print('Sleep Performance = ', last_7_days['Daily Sleep Score'].values[-1])\n",
    "    print('Ex Performance = ', weekly_ex_score(mod_mins = sum(final_daily_df['Moderate Ex Mins']), vig_mins = sum(final_daily_df['Vig Ex Mins'])))\n",
    "    print('Prdikt Perforamnce Capacity = ', prdikt_perf_capacity)\n",
    "\n",
    "    # hrly_perf_capacity = [round((prdikt_perf_capacity*0.01*i),1) for i in lark_third_bird_hardcoded]\n",
    "    # hrly_perf_capacity\n",
    "\n",
    "    lisst = list(sleep_cycle_df['Sleeping Chronotype'].values)\n",
    "    print('Mode =',mode(lisst))\n",
    "\n",
    "    #Deciding which hourly performance capacity values to use based on most occuring \n",
    "    ##This step may need to change to when graphs are produced \n",
    "    ###My logic thinks if you are more than often sleeping like a lark then your circadian ryhytm will adjust to this \n",
    "\n",
    "    if mode(lisst) == 'Lark':\n",
    "        hrly_perf_capacity = [round((prdikt_perf_capacity*0.01*i),1) for i in lark_third_bird_hardcoded]\n",
    "\n",
    "    elif mode(lisst) == 'Third Bird':\n",
    "        hrly_perf_capacity = [round((prdikt_perf_capacity*0.01*i),1) for i in lark_third_bird_hardcoded]\n",
    "    else:\n",
    "        hrly_perf_capacity = [round((prdikt_perf_capacity*0.01*i),1) for i in night_owl_harcoded]\n",
    "\n",
    "\n",
    "    return hrly_perf_capacity\n",
    "\n",
    "def plot_todays_perf_curve(y, sleep_cycle_df, rows_to_change):\n",
    "    \n",
    "    \"\"\"\n",
    "    \n",
    "    Plots todays predicted performance capacity. \n",
    "    \n",
    "    \"\"\"\n",
    "    #More data entries we are missing the creater the error shading(purple)will become \n",
    "    deteoriation_factor = [0.01,0.025,0.05, 0.075,0.1,0.125,0.15, 0.175, 0.2, 0.225]\n",
    "    upper_bound = [round((deteoriation_factor[len(rows_to_change)]*i)+i,1) for i in hrly_perf_capacity]\n",
    "    lower_bound = [round(i-(deteoriation_factor[len(rows_to_change)]*i),1) for i in hrly_perf_capacity]\n",
    "    \n",
    "    x = [str((avg_time(sleep_cycle_df['Cycle Starts']) + timedelta(hours=j)).time())[:5] for j in range(len(y))]\n",
    "    \n",
    "    plt.figure(figsize=(25,15))\n",
    "    plt.ylim(0,100)\n",
    "    plt.scatter(x,y, s=150, c=y,cmap ='RdYlGn',alpha=1)\n",
    "    plt.xticks(size=20, rotation=45)\n",
    "    plt.yticks(ticks = [i for i in range(0,110,10)],labels =[i for i in range(0,110,10)], size=20)\n",
    "    plt.tick_params(axis='y', labelsize=25)\n",
    "    plt.tick_params(axis='x', labelsize=25)\n",
    "    plt.fill_between(x, lower_bound, upper_bound, alpha=0.3, color='Purple')\n",
    "    plt.title('Today\\'s Predicted Performance',size=30)\n",
    "    sns.despine()\n",
    "    plt.grid(axis='x', linewidth=0.07)\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Calculate all Sleep Midpoints and Cycle Starts  and Print Sleeping Chronotype"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your Sleep Chronotype is currently being determined, ready in 10 days\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Day</th>\n",
       "      <th>Sleep Midpoint</th>\n",
       "      <th>Cycle Starts</th>\n",
       "      <th>Actual Cycle Starts</th>\n",
       "      <th>Sleeping Chronotype</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2021-11-18</td>\n",
       "      <td>Thursday</td>\n",
       "      <td>23:18:00</td>\n",
       "      <td>03:00:00</td>\n",
       "      <td>2021-11-18 03:06:00</td>\n",
       "      <td>Third Bird</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2021-11-15</td>\n",
       "      <td>Monday</td>\n",
       "      <td>00:12:00</td>\n",
       "      <td>04:00:00</td>\n",
       "      <td>2021-11-15 03:57:00</td>\n",
       "      <td>Lark</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2021-11-16</td>\n",
       "      <td>Tuesday</td>\n",
       "      <td>22:24:00</td>\n",
       "      <td>02:00:00</td>\n",
       "      <td>2021-11-16 01:54:00</td>\n",
       "      <td>Third Bird</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2021-11-17</td>\n",
       "      <td>Wednesday</td>\n",
       "      <td>23:18:00</td>\n",
       "      <td>03:00:00</td>\n",
       "      <td>2021-11-17 03:28:00</td>\n",
       "      <td>Third Bird</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Date        Day Sleep Midpoint Cycle Starts Actual Cycle Starts  \\\n",
       "0  2021-11-18   Thursday       23:18:00     03:00:00 2021-11-18 03:06:00   \n",
       "1  2021-11-15     Monday       00:12:00     04:00:00 2021-11-15 03:57:00   \n",
       "2  2021-11-16    Tuesday       22:24:00     02:00:00 2021-11-16 01:54:00   \n",
       "3  2021-11-17  Wednesday       23:18:00     03:00:00 2021-11-17 03:28:00   \n",
       "\n",
       "  Sleeping Chronotype  \n",
       "0          Third Bird  \n",
       "1                Lark  \n",
       "2          Third Bird  \n",
       "3          Third Bird  "
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sleep_cycle_df, avg_cycle_start = create_sleep_cycle_df(df=sleep_data_adj_len, bt_dt_form=bt_dt_form, wt_dt_form=wt_dt_form, days_to_calculate=14)\n",
    "\n",
    "#If sleep dates and days are the same this implies the sleeping pattern is very inconsistent likely due to shift work \n",
    "sleep_cycle_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1b. Calculate Avg Cycle Starts based on Day of the week "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Avg Cycle Start Time</th>\n",
       "      <th>Day</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>04:00:00</td>\n",
       "      <td>Monday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>03:00:00</td>\n",
       "      <td>Thursday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>02:00:00</td>\n",
       "      <td>Tuesday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>03:30:00</td>\n",
       "      <td>Wednesday</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Avg Cycle Start Time        Day\n",
       "0             04:00:00     Monday\n",
       "1             03:00:00   Thursday\n",
       "2             02:00:00    Tuesday\n",
       "3             03:30:00  Wednesday"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "avg_cycle_per_day, avg_cycle_starts_per_day = calculate_avg_cs_per_day(sleep_cycle_df)\n",
    "avg_cycle_per_day"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Combine Hardcoded values to the Sleep + Exercise Index to get values for each our "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>BT</th>\n",
       "      <th>WT</th>\n",
       "      <th>Sleep Duration Mins</th>\n",
       "      <th>Sleep Duration Hrs</th>\n",
       "      <th>Daily Sleep Debt</th>\n",
       "      <th>Sleep Debt(Neg)</th>\n",
       "      <th>Sleep Debt(Pos)</th>\n",
       "      <th>ASD</th>\n",
       "      <th>Daily Sleep Consistency</th>\n",
       "      <th>Daily SDD</th>\n",
       "      <th>Daily Sleep Score</th>\n",
       "      <th>Exercise Mins</th>\n",
       "      <th>Moderate Ex Mins</th>\n",
       "      <th>Vig Ex Mins</th>\n",
       "      <th>Daily Ex Score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>18/11/2021</td>\n",
       "      <td>19:30:00</td>\n",
       "      <td>03:06:00</td>\n",
       "      <td>456</td>\n",
       "      <td>7.61</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>100.0</td>\n",
       "      <td>95.1</td>\n",
       "      <td>96.57</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>15/11/2021</td>\n",
       "      <td>20:24:00</td>\n",
       "      <td>03:57:00</td>\n",
       "      <td>453</td>\n",
       "      <td>7.55</td>\n",
       "      <td>-0.45</td>\n",
       "      <td>-0.45</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.45</td>\n",
       "      <td>81.0</td>\n",
       "      <td>93.6</td>\n",
       "      <td>89.82</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>16/11/2021</td>\n",
       "      <td>18:54:00</td>\n",
       "      <td>01:54:00</td>\n",
       "      <td>420</td>\n",
       "      <td>7.00</td>\n",
       "      <td>-1.00</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>-1.45</td>\n",
       "      <td>73.0</td>\n",
       "      <td>85.8</td>\n",
       "      <td>81.96</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>17/11/2021</td>\n",
       "      <td>19:12:00</td>\n",
       "      <td>03:28:00</td>\n",
       "      <td>496</td>\n",
       "      <td>8.27</td>\n",
       "      <td>0.27</td>\n",
       "      <td>0</td>\n",
       "      <td>0.27</td>\n",
       "      <td>-1.18</td>\n",
       "      <td>77.3</td>\n",
       "      <td>92.9</td>\n",
       "      <td>88.22</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>22.3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Date        BT        WT  Sleep Duration Mins  Sleep Duration Hrs  \\\n",
       "0  18/11/2021  19:30:00  03:06:00                  456                7.61   \n",
       "1  15/11/2021  20:24:00  03:57:00                  453                7.55   \n",
       "2  16/11/2021  18:54:00  01:54:00                  420                7.00   \n",
       "3  17/11/2021  19:12:00  03:28:00                  496                8.27   \n",
       "\n",
       "   Daily Sleep Debt Sleep Debt(Neg) Sleep Debt(Pos)   ASD  \\\n",
       "0              0.00             0.0               0  0.00   \n",
       "1             -0.45           -0.45               0 -0.45   \n",
       "2             -1.00            -1.0               0 -1.45   \n",
       "3              0.27               0            0.27 -1.18   \n",
       "\n",
       "   Daily Sleep Consistency  Daily SDD  Daily Sleep Score  Exercise Mins  \\\n",
       "0                    100.0       95.1              96.57              0   \n",
       "1                     81.0       93.6              89.82              0   \n",
       "2                     73.0       85.8              81.96              0   \n",
       "3                     77.3       92.9              88.22              6   \n",
       "\n",
       "   Moderate Ex Mins  Vig Ex Mins Daily Ex Score  \n",
       "0                 0            0            0.0  \n",
       "1                 0            0            0.0  \n",
       "2                 0            0            0.0  \n",
       "3                 6            0           22.3  "
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_daily_data_table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sleep Performance =  88.22\n",
      "Ex Performance =  3.2\n",
      "Prdikt Perforamnce Capacity =  62.7\n",
      "Mode = Third Bird\n"
     ]
    }
   ],
   "source": [
    "hrly_perf_capacity = calculating_hrly_perf_capacity(sleep_data_adj_len, final_daily_data_table, sleep_cycle_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Plotting Graph "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1800x1080 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_todays_perf_curve(hrly_perf_capacity, sleep_cycle_df, rows_to_change)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Creating Calendar Heatmap "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [],
   "source": [
    "def prep_data_for_heatmap(sleep_cycle_df,avg_cycle_starts_per_day:dict,\n",
    "                          hrly_perf_capacity:list, calculation_time:int):\n",
    "    \n",
    "    if len(sleep_cycle_df) < calculation_time:\n",
    "        print('Not Enough Data')\n",
    "        \n",
    "        return None, None\n",
    "    else:\n",
    "        \n",
    "        #Creating Labels for Graph  \n",
    "        next7dates = [sleep_cycle_df['Date'].iloc[-1] + timedelta(hours=24*(i+1)) for i in range(0,7)]\n",
    "        next7_fut_dates = [datetime.strftime(i, '%d/%m') for i in next7dates]\n",
    "        next7days = [i.strftime('%A') for i in next7dates]\n",
    "        next7_df = pd.DataFrame(data={'Days':next7days, 'Dates':next7dates})\n",
    "        next7_df['Cycle Start'] = ''\n",
    "        x_labels = [next7days[i] + '\\n' + '('+ next7_fut_dates[i]+ ')' for i in range(len(next7days))]\n",
    "\n",
    "        #Creating new Dataframe with predicted cycle starts for the next 7 days based on the average times for previous days \n",
    "        for i in range(len(next7_df['Days'])):\n",
    "\n",
    "            #If we don't have the seperate date then use the avg \n",
    "            if next7_df['Days'][i] in avg_cycle_starts_per_day.keys():\n",
    "                next7_df['Cycle Start'].iloc[i] = avg_cycle_starts_per_day[next7_df['Days'][i]]\n",
    "\n",
    "            else:\n",
    "                print('{} not in data so will use avg = {}'.format(next7_df['Days'][i], avg_cycle_start))\n",
    "                next7_df['Cycle Start'].iloc[i] = avg_cycle_start  \n",
    "\n",
    "\n",
    "        #Creating New Calendar dataframe which contains performance capcity for every half an hour\n",
    "        daypredict_fix = pd.DataFrame()\n",
    "        daypredict_fix['Hrly Capacity'] = hrly_perf_capacity\n",
    "        time_hours= [str((avg_cycle_start + timedelta(hours=j)).time())[:5] for j in range(len(hrly_perf_capacity))]\n",
    "        daypredict_fix['Hours'] = time_hours\n",
    "        daypredict_fix['New Hours'] = ''\n",
    "\n",
    "        new_hours_lst = [] \n",
    "        for i in range(len(hrly_perf_capacity)):\n",
    "            new_hours_lst.append(daypredict_fix['Hours'][i][:2] + ':30')\n",
    "\n",
    "        daypredict_fix['New Hours'] = new_hours_lst\n",
    "\n",
    "        #Calculating performance capacity values for half hourly points between hours \n",
    "        perf_capac_vals= [round((hrly_perf_capacity[i] + hrly_perf_capacity[i+1])/2,1) for i in range(23)] + [round((hrly_perf_capacity[0] + hrly_perf_capacity[-1])/2,1)]\n",
    "        daypredict_fix['New Hours PC']= perf_capac_vals\n",
    "\n",
    "        #Appending hourly and half hourly into one list of performance capacity values\n",
    "        final_pc = [] \n",
    "        for i in range(len(daypredict_fix)):\n",
    "            final_pc.append(daypredict_fix['Hrly Capacity'][i])\n",
    "            final_pc.append(daypredict_fix['New Hours PC'][i])\n",
    "\n",
    "\n",
    "        #Creating long list of of times for each day 48 time points for each day - 48*7 \n",
    "        z_list = [] \n",
    "        for i in range(0,7):\n",
    "            z_list.append([str((next7_df['Cycle Start'].values[i] + timedelta(hours=j/2)).time())[:5] for j in range(len(final_pc))])\n",
    "\n",
    "\n",
    "        cycle_starts = [roundTime(i,roundTo=3600) for i in wt_dt_form]\n",
    "        x = [str((cycle_starts[0] + timedelta(hours=j)).time())[:5] for j in range(len(final_pc))]\n",
    "        y = final_pc\n",
    "\n",
    "        calendar_df = pd.DataFrame({'Time': x, 'Performance Capacity':y})\n",
    "\n",
    "        #Flattening long list \n",
    "        x_new = list(chain.from_iterable(z_list))\n",
    "        y_new = final_pc * 7\n",
    "\n",
    "        #Creating final table that graph wil lbe generated from \n",
    "        calendar_df = pd.DataFrame({'Time': x_new, 'Performance Capacity':y_new})\n",
    "        calendar_df['Date'] = list(chain.from_iterable([[next7_fut_dates[i]]*len(final_pc) for i in range(7)]))\n",
    "        calendar_final = calendar_df.pivot(columns='Date', index='Time', values='Performance Capacity')\n",
    "\n",
    "        #Find average wake time and natch the cycle start on the graph to that\n",
    "        new_axis = [str((avg_cycle_start + timedelta(hours=j/2)).time())[:5] for j in range(len(final_pc))]\n",
    "        calendar_final= calendar_final.reindex(new_axis)\n",
    "\n",
    "        return calendar_final, x_labels \n",
    "\n",
    "\n",
    "def plot_weekly_predicted_performance(heatmap_df, next):  \n",
    "    \n",
    "    #Plotting Heatmap  \n",
    "    x_labels = [next7days[i] + '\\n' + '('+ next7_fut_dates[i]+ ')' for i in range(len(next7days))]\n",
    "    plt.figure(figsize=(22.5,17.5))\n",
    "    ax_1 = sns.heatmap(heatmap_df, cmap = 'RdYlGn', linewidths=0.01, linecolor='black', annot=False,\n",
    "                      cbar_kws={'ticks': [0,10,20,30,40,50,60,70,80,90,100],\n",
    "                                'extend':'both'})\n",
    "\n",
    "\n",
    "    plt.yticks(rotation=0, size=20)\n",
    "\n",
    "    plt.xticks(ticks = [0.5,1.5,2.5,3.5,4.5,5.5,6.5],labels = x_labels , rotation = 0, size=20)\n",
    "    plt.tick_params(axis='y', labelsize=22)\n",
    "    plt.tick_params(axis='x', labelsize=22)\n",
    "    plt.title('Predicted Performance Capacity Over the Next 7 Days', size=30)\n",
    "\n",
    "    ax_1.figure.axes[-1].set_ylabel('Performance\\nCapacity', size=20, labelpad=50, rotation = 0)\n",
    "    cax = plt.gcf().axes[-1]\n",
    "    cax.tick_params(labelsize=22)\n",
    "    ax_1.set(xlabel=None)\n",
    "    ax_1.set(ylabel=None)\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Not Enough Data\n"
     ]
    }
   ],
   "source": [
    "heatmap_df, x_labels = prep_data_for_heatmap(sleep_cycle_df,avg_cycle_starts_per_day,\n",
    "                                             hrly_perf_capacity, calculation_time=7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_weekly_predicted_performance(heatmap_df, x_labels, calculation_time:int):  \n",
    "    \n",
    "    if len(sleep_cycle_df) < calculation_time:\n",
    "        \n",
    "        print('Not Enough Data')\n",
    "    \n",
    "    else:\n",
    "        \n",
    "        #Plotting Heatmap  \n",
    "        plt.figure(figsize=(22.5,17.5))\n",
    "\n",
    "        ax_1 = sns.heatmap(heatmap_df, cmap = 'RdYlGn', linewidths=0.01, linecolor='black', annot=False,\n",
    "                          cbar_kws={'ticks': [0,10,20,30,40,50,60,70,80,90,100],\n",
    "                                    'extend':'both'})\n",
    "\n",
    "\n",
    "        plt.yticks(rotation=0, size=20)\n",
    "\n",
    "        plt.xticks(ticks = [0.5,1.5,2.5,3.5,4.5,5.5,6.5],labels = x_labels , rotation = 0, size=20)\n",
    "        plt.tick_params(axis='y', labelsize=22)\n",
    "        plt.tick_params(axis='x', labelsize=22)\n",
    "        plt.title('Predicted Performance Capacity Over the Next 7 Days', size=30)\n",
    "\n",
    "        ax_1.figure.axes[-1].set_ylabel('Performance\\nCapacity', size=20, labelpad=50, rotation = 0)\n",
    "        cax = plt.gcf().axes[-1]\n",
    "        cax.tick_params(labelsize=22)\n",
    "        ax_1.set(xlabel=None)\n",
    "        ax_1.set(ylabel=None)\n",
    "        plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Not Enough Data\n"
     ]
    }
   ],
   "source": [
    "plot_weekly_predicted_performance(heatmap_df, x_labels, calculation_time=7)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Key Report Information"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [],
   "source": [
    "def generate_report_key_info(sleep_cycle_df, final_daily_data_table, hrly_perf_capacity, \n",
    "                             num_days_shown:int, days_to_calculate:int, rows_to_change:list):\n",
    "\n",
    "    print('Sleep Data')\n",
    "    print('=========================================================================================================', '\\n')\n",
    "\n",
    "    print('Sleep Chronotype')\n",
    "    print('-----------------', '\\n')\n",
    "    \n",
    "    if len(sleep_cycle_df) < days_to_calculate:\n",
    "        print('Your Sleep Chronotype is currently being determined, ready in {} days'.format(days_to_calculate - len(sleep_cycle_df)), '\\n'*2)\n",
    "\n",
    "    else:\n",
    "        print('Your Sleeping Type is {}'.format(mode(list(sleep_cycle_df['Sleeping Chronotype'].values))), '\\n'*2)\n",
    "\n",
    "    print('Sleep Performance')\n",
    "    print('-----------------', '\\n')\n",
    "    avg_sleep_perf = np.mean(sleep_data_adj_len['Daily Sleep Score'].values)\n",
    "    lower_bound_sp = round(avg_sleep_perf - np.std(sleep_data_adj_len['Daily Sleep Score'].values))\n",
    "    upper_bound_sp = round(avg_sleep_perf + np.std(sleep_data_adj_len['Daily Sleep Score'].values))\n",
    "    typical_range_sp = str(lower_bound_sp) + ' - ' + str(upper_bound_sp)\n",
    "    \n",
    "    \n",
    "    print('Todays Daily Sleep Performance = {}'.format(round(final_daily_data_table['Daily Sleep Score'].values[-1])))\n",
    "    print('Sleep Performance Typical Range = {}'.format(typical_range_sp), '\\n'*2)\n",
    "\n",
    "    \n",
    "\n",
    "    print('Sleep Consistency')\n",
    "    print('-----------------', '\\n')\n",
    "\n",
    "    print('Last 7 Days Sleep Consistency = {}'.format(weekly_sleep_consistency(bed_time_list=convert_time(final_daily_data_table['BT'].values[-7:]), \n",
    "                                                     wake_time_list=convert_time(final_daily_data_table['WT'].values[-7:]))), '\\n'*2)\n",
    "\n",
    "    print('Sleep Duration')\n",
    "    print('--------------', '\\n')\n",
    "    \n",
    "    avg_sleep_dur = round(np.mean(sleep_data_adj_len['Sleep Duration Hrs']),1)\n",
    "    avg_sleep_string_form = str(avg_sleep_dur)[0] + ' Hours ' + str(int(float(str(avg_sleep_dur)[1:])*60)) + ' Mins'\n",
    "    \n",
    "    avg_sleep_dur_past7 = round(np.mean(sleep_data_adj_len['Sleep Duration Hrs'][-7:]),1)\n",
    "    avg_sleep_string_form_past7 = str(avg_sleep_dur_past7)[0] + ' Hours ' + str(int(float(str(avg_sleep_dur_past7)[1:])*60)) + ' Mins'\n",
    "    \n",
    "    lower_bound = avg_sleep_dur - np.std(sleep_data_adj_len['Sleep Duration Hrs'].values)\n",
    "    upper_bound = avg_sleep_dur + np.std(sleep_data_adj_len['Sleep Duration Hrs'].values)\n",
    "    lower_bound_str = str(lower_bound)[0] + ' Hours ' + str(int(float(str(lower_bound)[1:])*60)) + ' mins'\n",
    "    upper_bound_str = str(upper_bound)[0] + ' Hours ' + str(int(float(str(upper_bound)[1:])*60)) + ' mins'\n",
    "    typical_range = lower_bound_str + ' - ' + upper_bound_str\n",
    "\n",
    "\n",
    "    \n",
    "    print('Avg Sleep Duration (All Sleep Data) = {}'.format(avg_sleep_string_form))\n",
    "    print('Avg Sleep Duration(Past {} Days) = {}'.format(len(sleep_data_adj_len['Sleep Duration Hrs'][-num_days_shown:]), avg_sleep_string_form_past7), '\\n')\n",
    "    \n",
    "    print('Over Last {} Days: '.format(num_days_shown))\n",
    "    print('Avg Bed Time: {}'.format(avg_time(final_daily_data_table['BT'][-num_days_shown:]).time()))\n",
    "    print('Avg Wake Time: {}'.format(avg_time(final_daily_data_table['WT'][-num_days_shown:]).time()), '\\n'*2)\n",
    "    \n",
    "    print('All Time: '.format(num_days_shown))\n",
    "    print('Avg Bed Time: {}'.format(avg_time(final_daily_data_table['BT']).time()))\n",
    "    print('Avg Wake Time: {}'.format(avg_time(final_daily_data_table['WT']).time()), '\\n')\n",
    "    \n",
    "    print('Last Nights Sleep Duration = {}'.format(str(final_daily_data_table['Sleep Duration Hrs'].values[-1])[0] + ' Hours ' + str(int(float(str(final_daily_data_table['Sleep Duration Hrs'].values[-1])[1:])*60)) + ' mins'))\n",
    "    print('Typical Sleep Duration Range = {}'.format(typical_range), '\\n')\n",
    "    \n",
    "    print('Sleep Debt')\n",
    "    print('------------', '\\n')\n",
    "    accum_SD = sum(final_daily_data_table['Daily Sleep Debt'])\n",
    "    asd_hrs = int(str(accum_SD).split('.')[0])\n",
    "    asd_mins = int(float('0.'+str(sum(final_daily_data_table['Daily Sleep Debt'])).split('.')[1])*60)\n",
    "    sleep_need_tonight = float(8 - accum_SD)\n",
    "\n",
    "    print('Accumulated Sleep Debt in last {} days = {} hours {} mins'.format(len(final_daily_data_table),asd_hrs,asd_mins ), '\\n')\n",
    "    print('Tomorrows sleep need = {}'.format(str((int(str(sleep_need_tonight).split('.')[0])))) + ' Hours ' + str(int(float('0.' + str(sleep_need_tonight).split('.')[1])*60)) + ' Mins')\n",
    "    print('Bed Time to eradicate all Sleep Debt Tonight = {}'.format((avg_time(final_daily_data_table['WT']) - timedelta(hours=8-asd_hrs, minutes=-asd_mins)).time()),'\\n')\n",
    "    \n",
    "    \n",
    "    acc_sd_week = ((56+(accum_SD))/7)- 8\n",
    "    sleep_need_week = float(8-acc_sd_week)\n",
    "    acc_sd_week_hrs = (int(str(acc_sd_week ).split('.')[0]))\n",
    "    acc_sd_week_mins = int(float('0.' + str(acc_sd_week ).split('.')[1])*60)\n",
    "\n",
    "    print('Sleep Need over the Next 7 days = {}'.format(str(int(str(sleep_need_week).split('.')[0]))) + ' Hours ' + str(round(float('0.' + str(sleep_need_week).split('.')[1])*60)) + ' Mins')\n",
    "    print('Bed Time across next 7 Days to eradicated Sleep Debt= {} '.format((avg_time(final_daily_data_table['WT']) - timedelta(hours=8-acc_sd_week_hrs, minutes=-acc_sd_week_mins)).time()), '\\n'*2)\n",
    "\n",
    "    print('Exercise Data')\n",
    "    print('========================================================================================================', '\\n')\n",
    "    print('Total Moderate Ex Mins over last {} days = {} '.format(num_days_shown, sum(final_daily_data_table['Moderate Ex Mins'][-num_days_shown:])))\n",
    "    print('Total Vigorous Ex Mins over last {} days = {}'.format(num_days_shown, sum(final_daily_data_table['Vig Ex Mins'][-num_days_shown:])), '\\n'*2)\n",
    "\n",
    "    print('Predicted Data')\n",
    "    print('========================================================================================================', '\\n')\n",
    "    print('Peak Predicted Perforamnce = {}'.format(round(max(hrly_perf_capacity))), '\\n'*2)\n",
    "    \n",
    "    print('Missing Data')\n",
    "    print('========================================================================================================', '\\n')\n",
    "    print('Number of data entries missing from user = {}'.format(len(rows_to_change)))\n",
    "    \n",
    "    print('Dates Missing = {} '.format([i for i in final_daily_data_table['Date'].values[rows_to_change]]))\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sleep Data\n",
      "========================================================================================================= \n",
      "\n",
      "Sleep Chronotype\n",
      "----------------- \n",
      "\n",
      "Your Sleep Chronotype is currently being determined, ready in 10 days \n",
      "\n",
      "\n",
      "Sleep Performance\n",
      "----------------- \n",
      "\n",
      "Todays Daily Sleep Performance = 88\n",
      "Sleep Performance Typical Range = 84 - 94 \n",
      "\n",
      "\n",
      "Sleep Consistency\n",
      "----------------- \n",
      "\n",
      "Last 7 Days Sleep Consistency = 77.3 \n",
      "\n",
      "\n",
      "Sleep Duration\n",
      "-------------- \n",
      "\n",
      "Avg Sleep Duration (All Sleep Data) = 7 Hours 36 Mins\n",
      "Avg Sleep Duration(Past 4 Days) = 7 Hours 36 Mins \n",
      "\n",
      "Over Last 4 Days: \n",
      "Avg Bed Time: 19:30:00\n",
      "Avg Wake Time: 03:06:15 \n",
      "\n",
      "\n",
      "All Time: \n",
      "Avg Bed Time: 19:30:00\n",
      "Avg Wake Time: 03:06:15 \n",
      "\n",
      "Last Nights Sleep Duration = 8 Hours 16 mins\n",
      "Typical Sleep Duration Range = 7 Hours 8 mins - 8 Hours 3 mins \n",
      "\n",
      "Sleep Debt\n",
      "------------ \n",
      "\n",
      "Accumulated Sleep Debt in last 4 days = -1 hours 10 mins \n",
      "\n",
      "Tomorrows sleep need = 9 Hours 10 Mins\n",
      "Bed Time to eradicate all Sleep Debt Tonight = 18:16:15 \n",
      "\n",
      "Sleep Need over the Next 7 days = 8 Hours 10 Mins\n",
      "Bed Time across next 7 Days to eradicated Sleep Debt= 19:16:15  \n",
      "\n",
      "\n",
      "Exercise Data\n",
      "======================================================================================================== \n",
      "\n",
      "Total Moderate Ex Mins over last 4 days = 6 \n",
      "Total Vigorous Ex Mins over last 4 days = 0 \n",
      "\n",
      "\n",
      "Predicted Data\n",
      "======================================================================================================== \n",
      "\n",
      "Peak Predicted Perforamnce = 63 \n",
      "\n",
      "\n",
      "Missing Data\n",
      "======================================================================================================== \n",
      "\n",
      "Number of data entries missing from user = 1\n",
      "Dates Missing = ['18/11/2021'] \n"
     ]
    }
   ],
   "source": [
    "generate_report_key_info(sleep_cycle_df, final_daily_data_table, hrly_perf_capacity, \n",
    "                         num_days_shown, days_to_calculate=14, rows_to_change=rows_to_change)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
